# Basic test with a view.
select int_col, string_col from functional.alltypes_view
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  0:SCAN HDFS
     table=functional.alltypes #partitions=24/24 size=478.45KB
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  1:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 1
    UNPARTITIONED

  0:SCAN HDFS
     table=functional.alltypes #partitions=24/24 size=478.45KB
====
# Basic test with a complex view.
select * from functional.complex_view
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  4:TOP-N
  |  order by: b.string_col ASC
  |  limit: 100
  |
  3:AGGREGATE (finalize)
  |  output: COUNT(a.bigint_col)
  |  group by: b.string_col
  |  having: COUNT(a.bigint_col) > 1
  |
  2:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    a.id = b.id
  |
  |----1:SCAN HDFS
  |       table=functional.alltypestiny #partitions=4/4 size=460B compact
  |
  0:SCAN HDFS
     table=functional.alltypesagg #partitions=10/10 size=743.67KB
     predicates: a.bigint_col < 50
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  9:TOP-N
  |  order by: b.string_col ASC
  |  limit: 100
  |
  8:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: HASH_PARTITIONED: b.string_col

  STREAM DATA SINK
    EXCHANGE ID: 8
    UNPARTITIONED

  4:TOP-N
  |  order by: b.string_col ASC
  |  limit: 100
  |
  7:AGGREGATE (merge finalize)
  |  output: SUM(COUNT(a.bigint_col))
  |  group by: b.string_col
  |  having: COUNT(a.bigint_col) > 1
  |
  6:EXCHANGE

PLAN FRAGMENT 2
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 6
    HASH_PARTITIONED: b.string_col

  3:AGGREGATE
  |  output: COUNT(a.bigint_col)
  |  group by: b.string_col
  |
  2:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    a.id = b.id
  |
  |----5:EXCHANGE
  |
  0:SCAN HDFS
     table=functional.alltypesagg #partitions=10/10 size=743.67KB
     predicates: a.bigint_col < 50

PLAN FRAGMENT 3
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 5
    UNPARTITIONED

  1:SCAN HDFS
     table=functional.alltypestiny #partitions=4/4 size=460B
====
# Basic test with a view on a view
select int_col, string_col from functional.view_view
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  0:SCAN HDFS
     table=functional.alltypes #partitions=24/24 size=478.45KB
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  1:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 1
    UNPARTITIONED

  0:SCAN HDFS
     table=functional.alltypes #partitions=24/24 size=478.45KB
====
# view used in a union.
select * from functional.alltypes_view union all
select * from functional.alltypes_view where id < 10
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  0:MERGE
  |
  |----2:SCAN HDFS
  |       table=functional.alltypes #partitions=24/24 size=478.45KB
  |       predicates: functional.alltypes.id < 10
  |
  1:SCAN HDFS
     table=functional.alltypes #partitions=24/24 size=478.45KB
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  3:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 3
    UNPARTITIONED

  5:MERGE
  |
  2:SCAN HDFS
     table=functional.alltypes #partitions=24/24 size=478.45KB
     predicates: functional.alltypes.id < 10

PLAN FRAGMENT 2
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 3
    UNPARTITIONED

  4:MERGE
  |
  1:SCAN HDFS
     table=functional.alltypes #partitions=24/24 size=478.45KB
====
# view used in an inline view.
select t.id from (select id from functional.alltypes_view) t
where t.id < 10
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  0:SCAN HDFS
     table=functional.alltypes #partitions=24/24 size=478.45KB
     predicates: functional.alltypes.id < 10
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  1:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 1
    UNPARTITIONED

  0:SCAN HDFS
     table=functional.alltypes #partitions=24/24 size=478.45KB
     predicates: functional.alltypes.id < 10
====
# Multiple views used in a join.
select * from functional.alltypes_view t1, functional.alltypes_view_sub t2,
functional.complex_view t3 where t1.id = t2.x and t2.x = t3.abc
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  8:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    int_col = COUNT(a.bigint_col)
  |
  |----6:TOP-N
  |    |  order by: b.string_col ASC
  |    |  limit: 100
  |    |
  |    5:AGGREGATE (finalize)
  |    |  output: COUNT(a.bigint_col)
  |    |  group by: b.string_col
  |    |  having: COUNT(a.bigint_col) > 1
  |    |
  |    4:HASH JOIN
  |    |  join op: INNER JOIN
  |    |  hash predicates:
  |    |    a.id = b.id
  |    |
  |    |----3:SCAN HDFS
  |    |       table=functional.alltypestiny #partitions=4/4 size=460B compact
  |    |
  |    2:SCAN HDFS
  |       table=functional.alltypesagg #partitions=10/10 size=743.67KB
  |       predicates: a.bigint_col < 50
  |
  7:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    functional.alltypes.id = int_col
  |
  |----1:SCAN HDFS
  |       table=functional.alltypes #partitions=24/24 size=478.45KB compact
  |
  0:SCAN HDFS
     table=functional.alltypes #partitions=24/24 size=478.45KB
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  16:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 16
    UNPARTITIONED

  8:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    int_col = COUNT(a.bigint_col)
  |
  |----15:EXCHANGE
  |       limit: 100
  |
  7:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    functional.alltypes.id = int_col
  |
  |----9:EXCHANGE
  |
  0:SCAN HDFS
     table=functional.alltypes #partitions=24/24 size=478.45KB

PLAN FRAGMENT 2
  PARTITION: UNPARTITIONED

  STREAM DATA SINK
    EXCHANGE ID: 15
    UNPARTITIONED

  14:TOP-N
  |  order by: b.string_col ASC
  |  limit: 100
  |
  13:EXCHANGE

PLAN FRAGMENT 3
  PARTITION: HASH_PARTITIONED: b.string_col

  STREAM DATA SINK
    EXCHANGE ID: 13
    UNPARTITIONED

  6:TOP-N
  |  order by: b.string_col ASC
  |  limit: 100
  |
  12:AGGREGATE (merge finalize)
  |  output: SUM(COUNT(a.bigint_col))
  |  group by: b.string_col
  |  having: COUNT(a.bigint_col) > 1
  |
  11:EXCHANGE

PLAN FRAGMENT 4
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 11
    HASH_PARTITIONED: b.string_col

  5:AGGREGATE
  |  output: COUNT(a.bigint_col)
  |  group by: b.string_col
  |
  4:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    a.id = b.id
  |
  |----10:EXCHANGE
  |
  2:SCAN HDFS
     table=functional.alltypesagg #partitions=10/10 size=743.67KB
     predicates: a.bigint_col < 50

PLAN FRAGMENT 5
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 10
    UNPARTITIONED

  3:SCAN HDFS
     table=functional.alltypestiny #partitions=4/4 size=460B

PLAN FRAGMENT 6
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 9
    UNPARTITIONED

  1:SCAN HDFS
     table=functional.alltypes #partitions=24/24 size=478.45KB
====
# Self-join of view to make sure the on clause is properly set
# in the cloned view instances.
select * from functional.alltypes_view t1
inner join functional.alltypes_view t2 on (t1.id = t2.id)
inner join functional.alltypes_view t3 on (t2.id = t3.id)
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  4:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    functional.alltypes.id = functional.alltypes.id
  |
  |----2:SCAN HDFS
  |       table=functional.alltypes #partitions=24/24 size=478.45KB compact
  |
  3:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    functional.alltypes.id = functional.alltypes.id
  |
  |----1:SCAN HDFS
  |       table=functional.alltypes #partitions=24/24 size=478.45KB compact
  |
  0:SCAN HDFS
     table=functional.alltypes #partitions=24/24 size=478.45KB
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  8:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: HASH_PARTITIONED: functional.alltypes.id

  STREAM DATA SINK
    EXCHANGE ID: 8
    UNPARTITIONED

  4:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    functional.alltypes.id = functional.alltypes.id
  |
  |----7:EXCHANGE
  |
  3:HASH JOIN
  |  join op: INNER JOIN (PARTITIONED)
  |  hash predicates:
  |    functional.alltypes.id = functional.alltypes.id
  |
  |----6:EXCHANGE
  |
  5:EXCHANGE

PLAN FRAGMENT 2
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 7
    UNPARTITIONED

  2:SCAN HDFS
     table=functional.alltypes #partitions=24/24 size=478.45KB

PLAN FRAGMENT 3
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 6
    HASH_PARTITIONED: functional.alltypes.id

  1:SCAN HDFS
     table=functional.alltypes #partitions=24/24 size=478.45KB

PLAN FRAGMENT 4
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 5
    HASH_PARTITIONED: functional.alltypes.id

  0:SCAN HDFS
     table=functional.alltypes #partitions=24/24 size=478.45KB
====
# Self-join views to make sure the using clause is properly set
# in the cloned view instances.
select * from functional.alltypes_view t1
inner join functional.alltypes_view t2 using(id)
inner join functional.alltypes_view t3 using(id)
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  4:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    functional.alltypes.id = functional.alltypes.id
  |
  |----2:SCAN HDFS
  |       table=functional.alltypes #partitions=24/24 size=478.45KB compact
  |
  3:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    functional.alltypes.id = functional.alltypes.id
  |
  |----1:SCAN HDFS
  |       table=functional.alltypes #partitions=24/24 size=478.45KB compact
  |
  0:SCAN HDFS
     table=functional.alltypes #partitions=24/24 size=478.45KB
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  8:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: HASH_PARTITIONED: functional.alltypes.id

  STREAM DATA SINK
    EXCHANGE ID: 8
    UNPARTITIONED

  4:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    functional.alltypes.id = functional.alltypes.id
  |
  |----7:EXCHANGE
  |
  3:HASH JOIN
  |  join op: INNER JOIN (PARTITIONED)
  |  hash predicates:
  |    functional.alltypes.id = functional.alltypes.id
  |
  |----6:EXCHANGE
  |
  5:EXCHANGE

PLAN FRAGMENT 2
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 7
    UNPARTITIONED

  2:SCAN HDFS
     table=functional.alltypes #partitions=24/24 size=478.45KB

PLAN FRAGMENT 3
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 6
    HASH_PARTITIONED: functional.alltypes.id

  1:SCAN HDFS
     table=functional.alltypes #partitions=24/24 size=478.45KB

PLAN FRAGMENT 4
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 5
    HASH_PARTITIONED: functional.alltypes.id

  0:SCAN HDFS
     table=functional.alltypes #partitions=24/24 size=478.45KB
====
# Self-join of view to make sure the join op is properly set
# in the cloned view instances.
select * from functional.alltypes_view t1
left outer join functional.alltypes_view t2 using(id)
full outer join functional.alltypes_view t3 using(id)
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  4:HASH JOIN
  |  join op: FULL OUTER JOIN
  |  hash predicates:
  |    functional.alltypes.id = functional.alltypes.id
  |
  |----2:SCAN HDFS
  |       table=functional.alltypes #partitions=24/24 size=478.45KB compact
  |
  3:HASH JOIN
  |  join op: LEFT OUTER JOIN
  |  hash predicates:
  |    functional.alltypes.id = functional.alltypes.id
  |
  |----1:SCAN HDFS
  |       table=functional.alltypes #partitions=24/24 size=478.45KB compact
  |
  0:SCAN HDFS
     table=functional.alltypes #partitions=24/24 size=478.45KB
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  9:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: HASH_PARTITIONED: functional.alltypes.id

  STREAM DATA SINK
    EXCHANGE ID: 9
    UNPARTITIONED

  4:HASH JOIN
  |  join op: FULL OUTER JOIN (PARTITIONED)
  |  hash predicates:
  |    functional.alltypes.id = functional.alltypes.id
  |
  |----8:EXCHANGE
  |
  7:EXCHANGE

PLAN FRAGMENT 2
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 8
    HASH_PARTITIONED: functional.alltypes.id

  2:SCAN HDFS
     table=functional.alltypes #partitions=24/24 size=478.45KB

PLAN FRAGMENT 3
  PARTITION: HASH_PARTITIONED: functional.alltypes.id

  STREAM DATA SINK
    EXCHANGE ID: 7
    HASH_PARTITIONED: functional.alltypes.id

  3:HASH JOIN
  |  join op: LEFT OUTER JOIN (PARTITIONED)
  |  hash predicates:
  |    functional.alltypes.id = functional.alltypes.id
  |
  |----6:EXCHANGE
  |
  5:EXCHANGE

PLAN FRAGMENT 4
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 6
    HASH_PARTITIONED: functional.alltypes.id

  1:SCAN HDFS
     table=functional.alltypes #partitions=24/24 size=478.45KB

PLAN FRAGMENT 5
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 5
    HASH_PARTITIONED: functional.alltypes.id

  0:SCAN HDFS
     table=functional.alltypes #partitions=24/24 size=478.45KB
====
# Self-join of view to make sure join hints are properly set
# in the cloned view instances.
# Note that in the plan above without hints the first join uses shuffle
# and the second broadcast.
select * from functional.alltypes_view t1
inner join [broadcast] functional.alltypes_view t2 using(id)
inner join [shuffle] functional.alltypes_view t3 using(id)
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  4:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    functional.alltypes.id = functional.alltypes.id
  |
  |----2:SCAN HDFS
  |       table=functional.alltypes #partitions=24/24 size=478.45KB compact
  |
  3:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    functional.alltypes.id = functional.alltypes.id
  |
  |----1:SCAN HDFS
  |       table=functional.alltypes #partitions=24/24 size=478.45KB compact
  |
  0:SCAN HDFS
     table=functional.alltypes #partitions=24/24 size=478.45KB
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  8:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: HASH_PARTITIONED: functional.alltypes.id

  STREAM DATA SINK
    EXCHANGE ID: 8
    UNPARTITIONED

  4:HASH JOIN
  |  join op: INNER JOIN (PARTITIONED)
  |  hash predicates:
  |    functional.alltypes.id = functional.alltypes.id
  |
  |----7:EXCHANGE
  |
  6:EXCHANGE

PLAN FRAGMENT 2
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 7
    HASH_PARTITIONED: functional.alltypes.id

  2:SCAN HDFS
     table=functional.alltypes #partitions=24/24 size=478.45KB

PLAN FRAGMENT 3
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 6
    HASH_PARTITIONED: functional.alltypes.id

  3:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    functional.alltypes.id = functional.alltypes.id
  |
  |----5:EXCHANGE
  |
  0:SCAN HDFS
     table=functional.alltypes #partitions=24/24 size=478.45KB

PLAN FRAGMENT 4
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 5
    UNPARTITIONED

  1:SCAN HDFS
     table=functional.alltypes #partitions=24/24 size=478.45KB
====
# Tests that parentheses are preserved when creating a view
# enabling proper partition pruning for this particular view.
select * from functional.alltypes_parens
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  0:SCAN HDFS
     table=functional.alltypes #partitions=1/24 size=19.95KB
     predicates: (int_col < 100 OR bool_col = FALSE)
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  1:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 1
    UNPARTITIONED

  0:SCAN HDFS
     table=functional.alltypes #partitions=1/24 size=19.95KB
     predicates: (int_col < 100 OR bool_col = FALSE)
====
