select *
from functional.testtbl t1 join functional.testtbl t2 using(id)
where t1.zip = 94611
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  2:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    t1.id = t2.id
  |
  |----1:SCAN HDFS
  |       table=functional.testtbl #partitions=0/1 size=0B compact
  |
  0:SCAN HDFS
     table=functional.testtbl #partitions=0/1 size=0B
     predicates: t1.zip = 94611
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  4:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 4
    UNPARTITIONED

  2:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    t1.id = t2.id
  |
  |----3:EXCHANGE
  |
  0:SCAN HDFS
     table=functional.testtbl #partitions=0/1 size=0B
     predicates: t1.zip = 94611

PLAN FRAGMENT 2
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 3
    UNPARTITIONED

  1:SCAN HDFS
     table=functional.testtbl #partitions=0/1 size=0B
====
# general exprs on both sides of equi-join predicates
select *
from functional.testtbl t1 left outer join functional.testtbl t2
on (t1.id - 1 = t2.id + 1)
where t1.zip = 94611
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  2:HASH JOIN
  |  join op: LEFT OUTER JOIN
  |  hash predicates:
  |    t1.id - 1 = t2.id + 1
  |
  |----1:SCAN HDFS
  |       table=functional.testtbl #partitions=0/1 size=0B compact
  |
  0:SCAN HDFS
     table=functional.testtbl #partitions=0/1 size=0B
     predicates: t1.zip = 94611
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  4:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 4
    UNPARTITIONED

  2:HASH JOIN
  |  join op: LEFT OUTER JOIN (BROADCAST)
  |  hash predicates:
  |    t1.id - 1 = t2.id + 1
  |
  |----3:EXCHANGE
  |
  0:SCAN HDFS
     table=functional.testtbl #partitions=0/1 size=0B
     predicates: t1.zip = 94611

PLAN FRAGMENT 2
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 3
    UNPARTITIONED

  1:SCAN HDFS
     table=functional.testtbl #partitions=0/1 size=0B
====
# test that on-clause predicates referring to multiple tuple ids
# get registered as eq join conjuncts
select t1.*
from (select * from functional.alltypestiny) t1
  join (select * from functional.alltypestiny) t2 on (t1.id = t2.id)
  join functional.alltypestiny t3 on (coalesce(t1.id, t2.id) = t3.id)
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  4:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    coalesce(functional.alltypestiny.id, functional.alltypestiny.id) = t3.id
  |
  |----2:SCAN HDFS
  |       table=functional.alltypestiny #partitions=4/4 size=460B compact
  |
  3:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    functional.alltypestiny.id = functional.alltypestiny.id
  |
  |----1:SCAN HDFS
  |       table=functional.alltypestiny #partitions=4/4 size=460B compact
  |
  0:SCAN HDFS
     table=functional.alltypestiny #partitions=4/4 size=460B
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  8:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: HASH_PARTITIONED: functional.alltypestiny.id

  STREAM DATA SINK
    EXCHANGE ID: 8
    UNPARTITIONED

  4:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    coalesce(functional.alltypestiny.id, functional.alltypestiny.id) = t3.id
  |
  |----7:EXCHANGE
  |
  3:HASH JOIN
  |  join op: INNER JOIN (PARTITIONED)
  |  hash predicates:
  |    functional.alltypestiny.id = functional.alltypestiny.id
  |
  |----6:EXCHANGE
  |
  5:EXCHANGE

PLAN FRAGMENT 2
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 7
    UNPARTITIONED

  2:SCAN HDFS
     table=functional.alltypestiny #partitions=4/4 size=460B

PLAN FRAGMENT 3
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 6
    HASH_PARTITIONED: functional.alltypestiny.id

  1:SCAN HDFS
     table=functional.alltypestiny #partitions=4/4 size=460B

PLAN FRAGMENT 4
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 5
    HASH_PARTITIONED: functional.alltypestiny.id

  0:SCAN HDFS
     table=functional.alltypestiny #partitions=4/4 size=460B
====
# test that our join inference recognizes that we cannot do a hash join
select t1.*
from (select * from functional.alltypestiny) t1
  join (select * from functional.alltypestiny) t2 on (t1.id = t2.id)
  join functional.alltypestiny t3 on (coalesce(t1.id, t3.id) = t3.id)
---- PLAN
not implemented: Join with 't3' requires at least one conjunctive equality predicate. To perform a Cartesian product between two tables, use a CROSS JOIN.
====
# multiple join predicates;
# scan predicates get propagated correctly;
# non-eq join predicates are evaluated as extra conjuncts by the join node
select *
from functional.alltypesagg a right outer join functional.alltypessmall b using (id, int_col)
where a.day >= 6
and b.month > 2
and a.tinyint_col = 15
and b.string_col = '15'
and a.tinyint_col + b.tinyint_col < 15
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  2:HASH JOIN
  |  join op: RIGHT OUTER JOIN
  |  hash predicates:
  |    a.id = b.id
  |    a.int_col = b.int_col
  |  other predicates: a.day >= 6, a.tinyint_col = 15, a.tinyint_col + b.tinyint_col < 15
  |
  |----1:SCAN HDFS
  |       table=functional.alltypessmall #partitions=2/4 size=3.17KB compact
  |       predicates: b.string_col = '15'
  |
  0:SCAN HDFS
     table=functional.alltypesagg #partitions=5/10 size=372.38KB
     predicates: a.tinyint_col = 15
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  5:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: HASH_PARTITIONED: a.id, a.int_col

  STREAM DATA SINK
    EXCHANGE ID: 5
    UNPARTITIONED

  2:HASH JOIN
  |  join op: RIGHT OUTER JOIN (PARTITIONED)
  |  hash predicates:
  |    a.id = b.id
  |    a.int_col = b.int_col
  |  other predicates: a.day >= 6, a.tinyint_col = 15, a.tinyint_col + b.tinyint_col < 15
  |
  |----4:EXCHANGE
  |
  3:EXCHANGE

PLAN FRAGMENT 2
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 4
    HASH_PARTITIONED: b.id, b.int_col

  1:SCAN HDFS
     table=functional.alltypessmall #partitions=2/4 size=3.17KB
     predicates: b.string_col = '15'

PLAN FRAGMENT 3
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 3
    HASH_PARTITIONED: a.id, a.int_col

  0:SCAN HDFS
     table=functional.alltypesagg #partitions=5/10 size=372.38KB
     predicates: a.tinyint_col = 15
====
# same as before, with 3 tables;
# non-eq join predicates are evaluated at the correct join node
select *
from functional.alltypesagg a
full outer join functional.alltypessmall b using (id, int_col)
right join functional.alltypesaggnonulls c on (a.id = c.id and b.string_col = c.string_col)
where a.day >= 6
and b.month > 2
and c.day < 3
and a.tinyint_col = 15
and b.string_col = '15'
and a.tinyint_col + b.tinyint_col < 15
and a.float_col - c.double_col < 0
and (b.double_col * c.tinyint_col > 1000 or c.tinyint_col < 1000)
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  4:HASH JOIN
  |  join op: RIGHT OUTER JOIN
  |  hash predicates:
  |    a.id = c.id
  |    b.string_col = c.string_col
  |  other predicates: a.day >= 6, b.month > 2, a.tinyint_col = 15, b.string_col = '15', a.tinyint_col + b.tinyint_col < 15, a.float_col - c.double_col < 0.0, (b.double_col * c.tinyint_col > 1000.0 OR c.tinyint_col < 1000)
  |
  |----2:SCAN HDFS
  |       table=functional.alltypesaggnonulls #partitions=2/10 size=148.10KB compact
  |
  3:HASH JOIN
  |  join op: FULL OUTER JOIN
  |  hash predicates:
  |    a.id = b.id
  |    a.int_col = b.int_col
  |
  |----1:SCAN HDFS
  |       table=functional.alltypessmall #partitions=2/4 size=3.17KB compact
  |       predicates: b.string_col = '15'
  |
  0:SCAN HDFS
     table=functional.alltypesagg #partitions=5/10 size=372.38KB
     predicates: a.tinyint_col = 15
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  9:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: HASH_PARTITIONED: a.id, b.string_col

  STREAM DATA SINK
    EXCHANGE ID: 9
    UNPARTITIONED

  4:HASH JOIN
  |  join op: RIGHT OUTER JOIN (PARTITIONED)
  |  hash predicates:
  |    a.id = c.id
  |    b.string_col = c.string_col
  |  other predicates: a.day >= 6, b.month > 2, a.tinyint_col = 15, b.string_col = '15', a.tinyint_col + b.tinyint_col < 15, a.float_col - c.double_col < 0.0, (b.double_col * c.tinyint_col > 1000.0 OR c.tinyint_col < 1000)
  |
  |----8:EXCHANGE
  |
  7:EXCHANGE

PLAN FRAGMENT 2
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 8
    HASH_PARTITIONED: c.id, c.string_col

  2:SCAN HDFS
     table=functional.alltypesaggnonulls #partitions=2/10 size=148.10KB

PLAN FRAGMENT 3
  PARTITION: HASH_PARTITIONED: a.id, a.int_col

  STREAM DATA SINK
    EXCHANGE ID: 7
    HASH_PARTITIONED: a.id, b.string_col

  3:HASH JOIN
  |  join op: FULL OUTER JOIN (PARTITIONED)
  |  hash predicates:
  |    a.id = b.id
  |    a.int_col = b.int_col
  |
  |----6:EXCHANGE
  |
  5:EXCHANGE

PLAN FRAGMENT 4
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 6
    HASH_PARTITIONED: b.id, b.int_col

  1:SCAN HDFS
     table=functional.alltypessmall #partitions=2/4 size=3.17KB
     predicates: b.string_col = '15'

PLAN FRAGMENT 5
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 5
    HASH_PARTITIONED: a.id, a.int_col

  0:SCAN HDFS
     table=functional.alltypesagg #partitions=5/10 size=372.38KB
     predicates: a.tinyint_col = 15
====
# non-equi join predicate not supported
select *
from functional.testtbl t1 join functional.testtbl t2
where t1.zip < t2.zip
---- PLAN
not implemented: Join with 't2' requires at least one conjunctive equality predicate. To perform a Cartesian product between two tables, use a CROSS JOIN.
====
# equi join with constants in the on clause are not supported
select a.id, b.id from
(select 1 as x, id from functional.alltypessmall) a
inner join
(select 1 as x, id from functional.alltypessmall) b
on a.x = b.x
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  2:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    1 = 1
  |
  |----1:SCAN HDFS
  |       table=functional.alltypessmall #partitions=4/4 size=6.32KB compact
  |
  0:SCAN HDFS
     table=functional.alltypessmall #partitions=4/4 size=6.32KB
====
# join using values() in a subquery
select a.int_col, b.x from functional.alltypessmall a inner join
(values(1 as int_col, 'a' as x), (1, 'b'), (2, 'c')) b on a.int_col = b.int_col
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  2:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    a.int_col = int_col
  |
  |----1:MERGE
  |       merging 3 SELECT CONSTANT
  |
  0:SCAN HDFS
     table=functional.alltypessmall #partitions=4/4 size=6.32KB
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  4:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 4
    UNPARTITIONED

  2:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    a.int_col = int_col
  |
  |----3:EXCHANGE
  |
  0:SCAN HDFS
     table=functional.alltypessmall #partitions=4/4 size=6.32KB

PLAN FRAGMENT 2
  PARTITION: UNPARTITIONED

  STREAM DATA SINK
    EXCHANGE ID: 3
    UNPARTITIONED

  1:MERGE
     merging 3 SELECT CONSTANT
====
# hbase-hdfs join
select *
from functional.alltypesagg join functional_hbase.alltypessmall using (id, int_col)
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  2:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    functional.alltypesagg.id = functional_hbase.alltypessmall.id
  |    functional.alltypesagg.int_col = functional_hbase.alltypessmall.int_col
  |
  |----1:SCAN HBASE
  |       table:alltypessmall
  |
  0:SCAN HDFS
     table=functional.alltypesagg #partitions=10/10 size=743.67KB
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  4:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 4
    UNPARTITIONED

  2:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    functional.alltypesagg.id = functional_hbase.alltypessmall.id
  |    functional.alltypesagg.int_col = functional_hbase.alltypessmall.int_col
  |
  |----3:EXCHANGE
  |
  0:SCAN HDFS
     table=functional.alltypesagg #partitions=10/10 size=743.67KB

PLAN FRAGMENT 2
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 3
    UNPARTITIONED

  1:SCAN HBASE
     table:alltypessmall
====
# hbase-hdfs join with scan filtering
select *
from functional.alltypesagg a join functional_hbase.stringids b
       on (a.id = cast(b.id as int) and a.int_col = b.int_col)
where a.day >= 6
and a.tinyint_col = 15
and b.id = '5'
and b.tinyint_col = 5
and b.tinyint_col > 123
and a.tinyint_col + b.tinyint_col < 15
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  2:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    a.id = CAST(b.id AS INT)
  |    a.int_col = b.int_col
  |  other predicates: a.tinyint_col + b.tinyint_col < 15
  |
  |----1:SCAN HBASE
  |       table:stringids
  |       start key: 5
  |       stop key: 5\0
  |       predicates: b.tinyint_col = 5, b.tinyint_col > 123
  |
  0:SCAN HDFS
     table=functional.alltypesagg #partitions=5/10 size=372.38KB
     predicates: a.tinyint_col = 15
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  4:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 4
    UNPARTITIONED

  2:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    a.id = CAST(b.id AS INT)
  |    a.int_col = b.int_col
  |  other predicates: a.tinyint_col + b.tinyint_col < 15
  |
  |----3:EXCHANGE
  |
  0:SCAN HDFS
     table=functional.alltypesagg #partitions=5/10 size=372.38KB
     predicates: a.tinyint_col = 15

PLAN FRAGMENT 2
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 3
    UNPARTITIONED

  1:SCAN HBASE
     table:stringids
     start key: 5
     stop key: 5\0
     predicates: b.tinyint_col = 5, b.tinyint_col > 123
---- SCANRANGELOCATIONS
NODE 0:
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypesagg/year=2010/month=1/day=10/100110.txt 0:76263
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypesagg/year=2010/month=1/day=6/100106.txt 0:76263
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypesagg/year=2010/month=1/day=7/100107.txt 0:76263
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypesagg/year=2010/month=1/day=8/100108.txt 0:76263
  HDFS SPLIT hdfs://localhost:20500/test-warehouse/alltypesagg/year=2010/month=1/day=9/100109.txt 0:76263
NODE 1:
  HBASE KEYRANGE port=60202 5:5\0
====
# left join followed by right join and then aggregate
select x.tinyint_col, count(x.day)
from (
       select a.day day, c.tinyint_col tinyint_col
       from functional.alltypesagg a
            join functional.alltypessmall b using (id, int_col)
            right outer join functional.alltypesnopart c on (b.id = c.id)
            join functional.alltypesagg d on (a.id = d.id)
       order by 1,2
       limit 10
     ) x
where x.day >= 6
group by x.tinyint_col
order by 2
limit 5
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  10:TOP-N
  |  order by: COUNT(x.day) ASC
  |  limit: 5
  |
  9:AGGREGATE (finalize)
  |  output: COUNT(a.day)
  |  group by: c.tinyint_col
  |
  8:SELECT
  |  predicates: a.day >= 6
  |
  7:TOP-N
  |  order by: a.day ASC, c.tinyint_col ASC
  |  limit: 10
  |
  6:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    a.id = d.id
  |
  |----3:SCAN HDFS
  |       table=functional.alltypesagg #partitions=10/10 size=743.67KB compact
  |
  5:HASH JOIN
  |  join op: RIGHT OUTER JOIN
  |  hash predicates:
  |    b.id = c.id
  |
  |----2:SCAN HDFS
  |       table=functional.alltypesnopart #partitions=0/1 size=0B compact
  |
  4:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    a.id = b.id
  |    a.int_col = b.int_col
  |
  |----1:SCAN HDFS
  |       table=functional.alltypessmall #partitions=4/4 size=6.32KB compact
  |
  0:SCAN HDFS
     table=functional.alltypesagg #partitions=10/10 size=743.67KB
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  10:TOP-N
  |  order by: COUNT(x.day) ASC
  |  limit: 5
  |
  9:AGGREGATE (finalize)
  |  output: COUNT(a.day)
  |  group by: c.tinyint_col
  |
  8:SELECT
  |  predicates: a.day >= 6
  |
  16:TOP-N
  |  order by: a.day ASC, c.tinyint_col ASC
  |  limit: 10
  |
  15:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: HASH_PARTITIONED: b.id

  STREAM DATA SINK
    EXCHANGE ID: 15
    UNPARTITIONED

  7:TOP-N
  |  order by: a.day ASC, c.tinyint_col ASC
  |  limit: 10
  |
  6:HASH JOIN
  |  join op: INNER JOIN (PARTITIONED)
  |  hash predicates:
  |    a.id = d.id
  |
  |----14:EXCHANGE
  |
  5:HASH JOIN
  |  join op: RIGHT OUTER JOIN (PARTITIONED)
  |  hash predicates:
  |    b.id = c.id
  |
  |----13:EXCHANGE
  |
  12:EXCHANGE

PLAN FRAGMENT 2
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 14
    HASH_PARTITIONED: d.id

  3:SCAN HDFS
     table=functional.alltypesagg #partitions=10/10 size=743.67KB

PLAN FRAGMENT 3
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 13
    HASH_PARTITIONED: c.id

  2:SCAN HDFS
     table=functional.alltypesnopart #partitions=0/1 size=0B

PLAN FRAGMENT 4
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 12
    HASH_PARTITIONED: b.id

  4:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    a.id = b.id
  |    a.int_col = b.int_col
  |
  |----11:EXCHANGE
  |
  0:SCAN HDFS
     table=functional.alltypesagg #partitions=10/10 size=743.67KB

PLAN FRAGMENT 5
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 11
    UNPARTITIONED

  1:SCAN HDFS
     table=functional.alltypessmall #partitions=4/4 size=6.32KB
====
# join without "other join conjuncts"
select * from functional.alltypessmall a, functional.alltypessmall b where a.id = b.id limit 1
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  2:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    a.id = b.id
  |  limit: 1
  |
  |----1:SCAN HDFS
  |       table=functional.alltypessmall #partitions=4/4 size=6.32KB compact
  |
  0:SCAN HDFS
     table=functional.alltypessmall #partitions=4/4 size=6.32KB
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  5:EXCHANGE
     limit: 1

PLAN FRAGMENT 1
  PARTITION: HASH_PARTITIONED: a.id

  STREAM DATA SINK
    EXCHANGE ID: 5
    UNPARTITIONED

  2:HASH JOIN
  |  join op: INNER JOIN (PARTITIONED)
  |  hash predicates:
  |    a.id = b.id
  |  limit: 1
  |
  |----4:EXCHANGE
  |
  3:EXCHANGE

PLAN FRAGMENT 2
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 4
    HASH_PARTITIONED: b.id

  1:SCAN HDFS
     table=functional.alltypessmall #partitions=4/4 size=6.32KB

PLAN FRAGMENT 3
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 3
    HASH_PARTITIONED: a.id

  0:SCAN HDFS
     table=functional.alltypessmall #partitions=4/4 size=6.32KB
====
# join conjunct is derived from equivalence classes
# (no explicit join conjunct between t1 and t2)
select *
from functional.testtbl t1, functional.testtbl t2, functional.testtbl t3
where t1.id = t3.id and t2.id = t3.id
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  4:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    t1.id = t3.id
  |
  |----2:SCAN HDFS
  |       table=functional.testtbl #partitions=0/1 size=0B compact
  |
  3:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    t1.id = t2.id
  |
  |----1:SCAN HDFS
  |       table=functional.testtbl #partitions=0/1 size=0B compact
  |
  0:SCAN HDFS
     table=functional.testtbl #partitions=0/1 size=0B
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  7:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 7
    UNPARTITIONED

  4:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    t1.id = t3.id
  |
  |----6:EXCHANGE
  |
  3:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    t1.id = t2.id
  |
  |----5:EXCHANGE
  |
  0:SCAN HDFS
     table=functional.testtbl #partitions=0/1 size=0B

PLAN FRAGMENT 2
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 6
    UNPARTITIONED

  2:SCAN HDFS
     table=functional.testtbl #partitions=0/1 size=0B

PLAN FRAGMENT 3
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 5
    UNPARTITIONED

  1:SCAN HDFS
     table=functional.testtbl #partitions=0/1 size=0B
====
# join involving a table with no table stats (functional.emptytable)
# tests that the default join strategy is broadcast
select * from functional.emptytable a inner join
functional.alltypes b on a.f2 = b.int_col
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  2:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    b.int_col = a.f2
  |
  |----0:SCAN HDFS
  |       table=functional.emptytable #partitions=0/0 size=0B compact
  |
  1:SCAN HDFS
     table=functional.alltypes #partitions=24/24 size=478.45KB
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  4:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 4
    UNPARTITIONED

  2:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    b.int_col = a.f2
  |
  |----3:EXCHANGE
  |
  1:SCAN HDFS
     table=functional.alltypes #partitions=24/24 size=478.45KB

PLAN FRAGMENT 2
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 3
    UNPARTITIONED

  0:SCAN HDFS
     table=functional.emptytable #partitions=0/0 size=0B
====
# cross join
select *
from functional.testtbl t1 cross join functional.testtbl
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  2:CROSS JOIN
  |  (BROADCAST)
  |
  |----1:SCAN HDFS
  |       table=functional.testtbl #partitions=0/1 size=0B compact
  |
  0:SCAN HDFS
     table=functional.testtbl #partitions=0/1 size=0B
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  4:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 4
    UNPARTITIONED

  2:CROSS JOIN
  |  (BROADCAST)
  |
  |----3:EXCHANGE
  |
  0:SCAN HDFS
     table=functional.testtbl #partitions=0/1 size=0B

PLAN FRAGMENT 2
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 3
    UNPARTITIONED

  1:SCAN HDFS
     table=functional.testtbl #partitions=0/1 size=0B
====
# cross join with where clause
select *
from functional.testtbl t1 cross join functional.testtbl t2 where t1.id < t2.id
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  2:CROSS JOIN
  |  (BROADCAST)
  |  predicates: t1.id < t2.id
  |
  |----1:SCAN HDFS
  |       table=functional.testtbl #partitions=0/1 size=0B compact
  |
  0:SCAN HDFS
     table=functional.testtbl #partitions=0/1 size=0B
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  4:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 4
    UNPARTITIONED

  2:CROSS JOIN
  |  (BROADCAST)
  |  predicates: t1.id < t2.id
  |
  |----3:EXCHANGE
  |
  0:SCAN HDFS
     table=functional.testtbl #partitions=0/1 size=0B

PLAN FRAGMENT 2
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 3
    UNPARTITIONED

  1:SCAN HDFS
     table=functional.testtbl #partitions=0/1 size=0B
====
# Tests that the partitioned join between b and c exploits the existing
# data partition of its lhs input.
select * from functional.alltypes a
inner join [shuffle] functional.alltypes b
on (a.id = b.id and b.int_col = a.int_col)
inner join [shuffle] functional.alltypes c
on (b.id = c.id and c.int_col = b.int_col)
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  4:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    b.id = c.id
  |    b.int_col = c.int_col
  |
  |----2:SCAN HDFS
  |       table=functional.alltypes #partitions=24/24 size=478.45KB compact
  |
  3:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    a.id = b.id
  |    a.int_col = b.int_col
  |
  |----1:SCAN HDFS
  |       table=functional.alltypes #partitions=24/24 size=478.45KB compact
  |
  0:SCAN HDFS
     table=functional.alltypes #partitions=24/24 size=478.45KB
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  8:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: HASH_PARTITIONED: a.id, a.int_col

  STREAM DATA SINK
    EXCHANGE ID: 8
    UNPARTITIONED

  4:HASH JOIN
  |  join op: INNER JOIN (PARTITIONED)
  |  hash predicates:
  |    b.id = c.id
  |    b.int_col = c.int_col
  |
  |----7:EXCHANGE
  |
  3:HASH JOIN
  |  join op: INNER JOIN (PARTITIONED)
  |  hash predicates:
  |    a.id = b.id
  |    a.int_col = b.int_col
  |
  |----6:EXCHANGE
  |
  5:EXCHANGE

PLAN FRAGMENT 2
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 7
    HASH_PARTITIONED: c.id, c.int_col

  2:SCAN HDFS
     table=functional.alltypes #partitions=24/24 size=478.45KB

PLAN FRAGMENT 3
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 6
    HASH_PARTITIONED: b.id, b.int_col

  1:SCAN HDFS
     table=functional.alltypes #partitions=24/24 size=478.45KB

PLAN FRAGMENT 4
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 5
    HASH_PARTITIONED: a.id, a.int_col

  0:SCAN HDFS
     table=functional.alltypes #partitions=24/24 size=478.45KB
====
# Tests that the partitioned join between a and b exploits the existing
# data partition of its rhs input.
select * from functional.alltypes a
inner join [shuffle]
  (select count(*), int_col, bool_col
   from functional.alltypes group by int_col, bool_col) b
on (a.int_col = b.int_col and b.bool_col = a.bool_col)
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  3:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    a.int_col = int_col
  |    a.bool_col = bool_col
  |
  |----2:AGGREGATE (finalize)
  |    |  output: COUNT(*)
  |    |  group by: int_col, bool_col
  |    |
  |    1:SCAN HDFS
  |       table=functional.alltypes #partitions=24/24 size=478.45KB
  |
  0:SCAN HDFS
     table=functional.alltypes #partitions=24/24 size=478.45KB
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  7:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: HASH_PARTITIONED: int_col, bool_col

  STREAM DATA SINK
    EXCHANGE ID: 7
    UNPARTITIONED

  3:HASH JOIN
  |  join op: INNER JOIN (PARTITIONED)
  |  hash predicates:
  |    a.int_col = int_col
  |    a.bool_col = bool_col
  |
  |----5:AGGREGATE (merge finalize)
  |    |  output: SUM(COUNT(*))
  |    |  group by: int_col, bool_col
  |    |
  |    4:EXCHANGE
  |
  6:EXCHANGE

PLAN FRAGMENT 2
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 4
    HASH_PARTITIONED: int_col, bool_col

  2:AGGREGATE
  |  output: COUNT(*)
  |  group by: int_col, bool_col
  |
  1:SCAN HDFS
     table=functional.alltypes #partitions=24/24 size=478.45KB

PLAN FRAGMENT 3
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 6
    HASH_PARTITIONED: a.int_col, a.bool_col

  0:SCAN HDFS
     table=functional.alltypes #partitions=24/24 size=478.45KB
====
# Tests that the partitioned join between b and c exploits the existing
# data partition of its lhs and rhs inputs.
select * from functional.alltypes a
inner join [shuffle] functional.alltypes b
on(a.int_col = b.int_col and b.bool_col = a.bool_col)
inner join [shuffle]
  (select count(*), int_col, bool_col
   from functional.alltypes group by int_col, bool_col) c
on (b.int_col = c.int_col and c.bool_col = b.bool_col)
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  5:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    a.int_col = b.int_col
  |    a.bool_col = b.bool_col
  |
  |----1:SCAN HDFS
  |       table=functional.alltypes #partitions=24/24 size=478.45KB compact
  |
  4:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    a.int_col = int_col
  |    a.bool_col = bool_col
  |
  |----3:AGGREGATE (finalize)
  |    |  output: COUNT(*)
  |    |  group by: int_col, bool_col
  |    |
  |    2:SCAN HDFS
  |       table=functional.alltypes #partitions=24/24 size=478.45KB
  |
  0:SCAN HDFS
     table=functional.alltypes #partitions=24/24 size=478.45KB
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  10:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: HASH_PARTITIONED: int_col, bool_col

  STREAM DATA SINK
    EXCHANGE ID: 10
    UNPARTITIONED

  5:HASH JOIN
  |  join op: INNER JOIN (PARTITIONED)
  |  hash predicates:
  |    a.int_col = b.int_col
  |    a.bool_col = b.bool_col
  |
  |----9:EXCHANGE
  |
  4:HASH JOIN
  |  join op: INNER JOIN (PARTITIONED)
  |  hash predicates:
  |    a.int_col = int_col
  |    a.bool_col = bool_col
  |
  |----7:AGGREGATE (merge finalize)
  |    |  output: SUM(COUNT(*))
  |    |  group by: int_col, bool_col
  |    |
  |    6:EXCHANGE
  |
  8:EXCHANGE

PLAN FRAGMENT 2
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 9
    HASH_PARTITIONED: b.int_col, b.bool_col

  1:SCAN HDFS
     table=functional.alltypes #partitions=24/24 size=478.45KB

PLAN FRAGMENT 3
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 6
    HASH_PARTITIONED: int_col, bool_col

  3:AGGREGATE
  |  output: COUNT(*)
  |  group by: int_col, bool_col
  |
  2:SCAN HDFS
     table=functional.alltypes #partitions=24/24 size=478.45KB

PLAN FRAGMENT 4
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 8
    HASH_PARTITIONED: a.int_col, a.bool_col

  0:SCAN HDFS
     table=functional.alltypes #partitions=24/24 size=478.45KB
====
