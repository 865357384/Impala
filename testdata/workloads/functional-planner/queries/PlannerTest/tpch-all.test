# TODO: Change these tests to use the partitioned TPCH tables.
# Q1 - Pricing Summary Report Query
# Modifications: Remove ORDER BY, added ROUND() calls
select
  l_returnflag,
  l_linestatus,
  round(sum(l_quantity), 1),
  round(sum(l_extendedprice), 1),
  round(sum(l_extendedprice * (1 - l_discount)), 1),
  round(sum(l_extendedprice * (1 - l_discount) * (1 + l_tax)), 1),
  round(avg(l_quantity), 1),
  round(avg(l_extendedprice), 1),
  round(avg(l_discount), 1), count(1)
from
  tpch.lineitem
where
  l_shipdate<='1998-09-02'
group by
  l_returnflag,
  l_linestatus
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  1:AGGREGATE (finalize)
  |  output: SUM(l_quantity), SUM(l_extendedprice), SUM(l_extendedprice * (1.0 - l_discount)), SUM(l_extendedprice * (1.0 - l_discount) * (1.0 + l_tax)), COUNT(l_quantity), COUNT(l_extendedprice), SUM(l_discount), COUNT(l_discount), COUNT(1)
  |  group by: l_returnflag, l_linestatus
  |
  0:SCAN HDFS
     table=tpch.lineitem #partitions=1/1 size=718.94MB
     predicates: l_shipdate <= '1998-09-02'
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  4:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: HASH_PARTITIONED: l_returnflag, l_linestatus

  STREAM DATA SINK
    EXCHANGE ID: 4
    UNPARTITIONED

  3:AGGREGATE (merge finalize)
  |  output: SUM(SUM(l_quantity)), SUM(SUM(l_extendedprice)), SUM(SUM(l_extendedprice * (1.0 - l_discount))), SUM(SUM(l_extendedprice * (1.0 - l_discount) * (1.0 + l_tax))), SUM(COUNT(l_quantity)), SUM(COUNT(l_extendedprice)), SUM(SUM(l_discount)), SUM(COUNT(l_discount)), SUM(COUNT(1))
  |  group by: l_returnflag, l_linestatus
  |
  2:EXCHANGE

PLAN FRAGMENT 2
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 2
    HASH_PARTITIONED: l_returnflag, l_linestatus

  1:AGGREGATE
  |  output: SUM(l_quantity), SUM(l_extendedprice), SUM(l_extendedprice * (1.0 - l_discount)), SUM(l_extendedprice * (1.0 - l_discount) * (1.0 + l_tax)), COUNT(l_quantity), COUNT(l_extendedprice), SUM(l_discount), COUNT(l_discount), COUNT(1)
  |  group by: l_returnflag, l_linestatus
  |
  0:SCAN HDFS
     table=tpch.lineitem #partitions=1/1 size=718.94MB
     predicates: l_shipdate <= '1998-09-02'
====
# Q2 - Minimum Cost Supplier Query
insert overwrite table tpch.q2_minimum_cost_supplier_tmp1
select
  s.s_acctbal,
  s.s_name,
  n.n_name,
  p.p_partkey,
  ps.ps_supplycost,
  p.p_mfgr,
  s.s_address,
  s.s_phone,
  s.s_comment
from tpch.partsupp ps
  join tpch.part p
    on (p.p_partkey = ps.ps_partkey and p.p_size = 15 and p.p_type like '%BRASS')
  join tpch.supplier s
    on (s.s_suppkey = ps.ps_suppkey)
  join tpch.nation n
    on (s.s_nationkey = n.n_nationkey)
  join tpch.region r
    on (n.n_regionkey = r.r_regionkey and r.r_name = 'EUROPE')
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  WRITE TO HDFS table=tpch.q2_minimum_cost_supplier_tmp1
    overwrite=true

  8:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    n.n_regionkey = r.r_regionkey
  |
  |----4:SCAN HDFS
  |       table=tpch.region #partitions=1/1 size=384B compact
  |       predicates: r.r_name = 'EUROPE'
  |
  7:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    s.s_nationkey = n.n_nationkey
  |
  |----3:SCAN HDFS
  |       table=tpch.nation #partitions=1/1 size=2.15KB compact
  |
  6:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    ps.ps_suppkey = s.s_suppkey
  |
  |----2:SCAN HDFS
  |       table=tpch.supplier #partitions=1/1 size=1.33MB compact
  |
  5:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    ps.ps_partkey = p.p_partkey
  |
  |----1:SCAN HDFS
  |       table=tpch.part #partitions=1/1 size=22.83MB compact
  |       predicates: p.p_size = 15, p.p_type LIKE '%BRASS'
  |
  0:SCAN HDFS
     table=tpch.partsupp #partitions=1/1 size=112.71MB
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: HASH_PARTITIONED: ps.ps_suppkey

  WRITE TO HDFS table=tpch.q2_minimum_cost_supplier_tmp1
    overwrite=true

  8:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    n.n_regionkey = r.r_regionkey
  |
  |----13:EXCHANGE
  |
  7:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    s.s_nationkey = n.n_nationkey
  |
  |----12:EXCHANGE
  |
  6:HASH JOIN
  |  join op: INNER JOIN (PARTITIONED)
  |  hash predicates:
  |    ps.ps_suppkey = s.s_suppkey
  |
  |----11:EXCHANGE
  |
  10:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 13
    UNPARTITIONED

  4:SCAN HDFS
     table=tpch.region #partitions=1/1 size=384B
     predicates: r.r_name = 'EUROPE'

PLAN FRAGMENT 2
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 12
    UNPARTITIONED

  3:SCAN HDFS
     table=tpch.nation #partitions=1/1 size=2.15KB

PLAN FRAGMENT 3
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 11
    HASH_PARTITIONED: s.s_suppkey

  2:SCAN HDFS
     table=tpch.supplier #partitions=1/1 size=1.33MB

PLAN FRAGMENT 4
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 10
    HASH_PARTITIONED: ps.ps_suppkey

  5:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    ps.ps_partkey = p.p_partkey
  |
  |----9:EXCHANGE
  |
  0:SCAN HDFS
     table=tpch.partsupp #partitions=1/1 size=112.71MB

PLAN FRAGMENT 5
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 9
    UNPARTITIONED

  1:SCAN HDFS
     table=tpch.part #partitions=1/1 size=22.83MB
     predicates: p.p_size = 15, p.p_type LIKE '%BRASS'
====
insert overwrite table tpch.q2_minimum_cost_supplier_tmp2
select
  p_partkey,
  min(ps_supplycost)
from  tpch.q2_minimum_cost_supplier_tmp1
group by p_partkey
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  WRITE TO HDFS table=tpch.q2_minimum_cost_supplier_tmp2
    overwrite=true

  1:AGGREGATE (finalize)
  |  output: MIN(ps_supplycost)
  |  group by: p_partkey
  |
  0:SCAN HDFS
     table=tpch.q2_minimum_cost_supplier_tmp1 #partitions=1/1 size=108.41KB
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: HASH_PARTITIONED: p_partkey

  WRITE TO HDFS table=tpch.q2_minimum_cost_supplier_tmp2
    overwrite=true

  3:AGGREGATE (merge finalize)
  |  output: MIN(MIN(ps_supplycost))
  |  group by: p_partkey
  |
  2:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 2
    HASH_PARTITIONED: p_partkey

  1:AGGREGATE
  |  output: MIN(ps_supplycost)
  |  group by: p_partkey
  |
  0:SCAN HDFS
     table=tpch.q2_minimum_cost_supplier_tmp1 #partitions=1/1 size=108.41KB
====
# Modifications: Fully qualified name of p_partkey column in the ORDER BY clause
select
  t1.s_acctbal,
  t1.s_name,
  t1.n_name,
  t1.p_partkey,
  t1.p_mfgr,
  t1.s_address,
  t1.s_phone,
  t1.s_comment
from tpch.q2_minimum_cost_supplier_tmp1 t1
join tpch.q2_minimum_cost_supplier_tmp2 t2
  on (t1.p_partkey = t2.p_partkey and t1.ps_supplycost = t2.ps_min_supplycost)
order by
  s_acctbal desc,
  n_name,
  s_name,
  t1.p_partkey
limit 100
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  3:TOP-N
  |  order by: t1.s_acctbal DESC, t1.n_name ASC, t1.s_name ASC, t1.p_partkey ASC
  |  limit: 100
  |
  2:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    t1.p_partkey = t2.p_partkey
  |    t1.ps_supplycost = t2.ps_min_supplycost
  |
  |----1:SCAN HDFS
  |       table=tpch.q2_minimum_cost_supplier_tmp2 #partitions=1/1 size=6.37KB compact
  |
  0:SCAN HDFS
     table=tpch.q2_minimum_cost_supplier_tmp1 #partitions=1/1 size=108.41KB
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  6:TOP-N
  |  order by: t1.s_acctbal DESC, t1.n_name ASC, t1.s_name ASC, t1.p_partkey ASC
  |  limit: 100
  |
  5:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 5
    UNPARTITIONED

  3:TOP-N
  |  order by: t1.s_acctbal DESC, t1.n_name ASC, t1.s_name ASC, t1.p_partkey ASC
  |  limit: 100
  |
  2:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    t1.p_partkey = t2.p_partkey
  |    t1.ps_supplycost = t2.ps_min_supplycost
  |
  |----4:EXCHANGE
  |
  0:SCAN HDFS
     table=tpch.q2_minimum_cost_supplier_tmp1 #partitions=1/1 size=108.41KB

PLAN FRAGMENT 2
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 4
    UNPARTITIONED

  1:SCAN HDFS
     table=tpch.q2_minimum_cost_supplier_tmp2 #partitions=1/1 size=6.37KB
====
# Q3 - Shipping Priority Query
# Modifications: Added round() calls
select
  l_orderkey,
  round(sum(l_extendedprice * (1 - l_discount)), 5) as revenue,
  o_orderdate,
  o_shippriority
from tpch.lineitem l
  join tpch.orders o
    on (l.l_orderkey = o.o_orderkey)
  join tpch.customer c
    on (c.c_mktsegment = 'BUILDING' and c.c_custkey = o.o_custkey)
where
  o_orderdate < '1995-03-15' and
  l_shipdate > '1995-03-15'
group by
  l_orderkey,
  o_orderdate,
  o_shippriority
order by
  revenue desc,
  o_orderdate
limit 10
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  6:TOP-N
  |  order by: round(SUM(l_extendedprice * (1.0 - l_discount)), 5) DESC, o_orderdate ASC
  |  limit: 10
  |
  5:AGGREGATE (finalize)
  |  output: SUM(l_extendedprice * (1.0 - l_discount))
  |  group by: l_orderkey, o_orderdate, o_shippriority
  |
  4:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    o.o_custkey = c.c_custkey
  |
  |----2:SCAN HDFS
  |       table=tpch.customer #partitions=1/1 size=23.08MB compact
  |       predicates: c.c_mktsegment = 'BUILDING'
  |
  3:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    l.l_orderkey = o.o_orderkey
  |
  |----1:SCAN HDFS
  |       table=tpch.orders #partitions=1/1 size=162.56MB compact
  |       predicates: o_orderdate < '1995-03-15'
  |
  0:SCAN HDFS
     table=tpch.lineitem #partitions=1/1 size=718.94MB
     predicates: l_shipdate > '1995-03-15'
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  12:TOP-N
  |  order by: round(SUM(l_extendedprice * (1.0 - l_discount)), 5) DESC, o_orderdate ASC
  |  limit: 10
  |
  11:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: HASH_PARTITIONED: l_orderkey, o_orderdate, o_shippriority

  STREAM DATA SINK
    EXCHANGE ID: 11
    UNPARTITIONED

  6:TOP-N
  |  order by: round(SUM(l_extendedprice * (1.0 - l_discount)), 5) DESC, o_orderdate ASC
  |  limit: 10
  |
  10:AGGREGATE (merge finalize)
  |  output: SUM(SUM(l_extendedprice * (1.0 - l_discount)))
  |  group by: l_orderkey, o_orderdate, o_shippriority
  |
  9:EXCHANGE

PLAN FRAGMENT 2
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 9
    HASH_PARTITIONED: l_orderkey, o_orderdate, o_shippriority

  5:AGGREGATE
  |  output: SUM(l_extendedprice * (1.0 - l_discount))
  |  group by: l_orderkey, o_orderdate, o_shippriority
  |
  4:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    o.o_custkey = c.c_custkey
  |
  |----8:EXCHANGE
  |
  3:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    l.l_orderkey = o.o_orderkey
  |
  |----7:EXCHANGE
  |
  0:SCAN HDFS
     table=tpch.lineitem #partitions=1/1 size=718.94MB
     predicates: l_shipdate > '1995-03-15'

PLAN FRAGMENT 3
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 8
    UNPARTITIONED

  2:SCAN HDFS
     table=tpch.customer #partitions=1/1 size=23.08MB
     predicates: c.c_mktsegment = 'BUILDING'

PLAN FRAGMENT 4
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 7
    UNPARTITIONED

  1:SCAN HDFS
     table=tpch.orders #partitions=1/1 size=162.56MB
     predicates: o_orderdate < '1995-03-15'
====
# Q4 - Order Priority Checking Query
# Modifications: Converted selects from multiple tables to joins,
# rewrote 'exists' as an inner join + count(distinct), added
# limit
select
  o_orderpriority,
  count(distinct l_orderkey) as order_count
from tpch.lineitem l
inner join tpch.orders o
  on (o.o_orderkey = l.l_orderkey and
      l.l_commitdate < l.l_receiptdate)
where
  o_orderdate >= '1993-07-01' and
  o_orderdate < '1993-10-01'
group by
  o_orderpriority
order by
  o_orderpriority
limit 10
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  5:TOP-N
  |  order by: o_orderpriority ASC
  |  limit: 10
  |
  4:AGGREGATE (merge finalize)
  |  output: COUNT(l_orderkey)
  |  group by: o_orderpriority
  |
  3:AGGREGATE
  |  group by: o_orderpriority, l_orderkey
  |
  2:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    l.l_orderkey = o.o_orderkey
  |
  |----1:SCAN HDFS
  |       table=tpch.orders #partitions=1/1 size=162.56MB compact
  |       predicates: o_orderdate >= '1993-07-01', o_orderdate < '1993-10-01'
  |
  0:SCAN HDFS
     table=tpch.lineitem #partitions=1/1 size=718.94MB
     predicates: l.l_commitdate < l.l_receiptdate
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  10:TOP-N
  |  order by: o_orderpriority ASC
  |  limit: 10
  |
  9:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: HASH_PARTITIONED: o_orderpriority

  STREAM DATA SINK
    EXCHANGE ID: 9
    UNPARTITIONED

  5:TOP-N
  |  order by: o_orderpriority ASC
  |  limit: 10
  |
  4:AGGREGATE (merge finalize)
  |  output: COUNT(l_orderkey)
  |  group by: o_orderpriority
  |
  8:AGGREGATE (merge)
  |  group by: o_orderpriority, l_orderkey
  |
  7:EXCHANGE

PLAN FRAGMENT 2
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 7
    HASH_PARTITIONED: o_orderpriority

  3:AGGREGATE
  |  group by: o_orderpriority, l_orderkey
  |
  2:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    l.l_orderkey = o.o_orderkey
  |
  |----6:EXCHANGE
  |
  0:SCAN HDFS
     table=tpch.lineitem #partitions=1/1 size=718.94MB
     predicates: l.l_commitdate < l.l_receiptdate

PLAN FRAGMENT 3
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 6
    UNPARTITIONED

  1:SCAN HDFS
     table=tpch.orders #partitions=1/1 size=162.56MB
     predicates: o_orderdate >= '1993-07-01', o_orderdate < '1993-10-01'
====
# Q5 - Local Supplier Volume Query
# Modifications: Added round() call, converted selects from multiple tables
# to joins, added limit
select
  n_name,
  round(sum(l_extendedprice * (1 - l_discount)), 5) as revenue
from tpch.lineitem l
join tpch.orders o
  on (l_orderkey = o_orderkey)
join tpch.supplier s
  on (l_suppkey = s_suppkey)
join tpch.customer
  on (c_nationkey = s_nationkey and c_custkey = o_custkey)
join tpch.nation
  on (s_nationkey = n_nationkey)
join tpch.region
  on (n_regionkey = r_regionkey)
where
  r_name = 'ASIA'
  and o_orderdate >= '1994-01-01'
  and o_orderdate < '1995-01-01'
group by
  n_name
order by
  revenue desc
limit 100
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  12:TOP-N
  |  order by: round(SUM(l_extendedprice * (1.0 - l_discount)), 5) DESC
  |  limit: 100
  |
  11:AGGREGATE (finalize)
  |  output: SUM(l_extendedprice * (1.0 - l_discount))
  |  group by: n_name
  |
  10:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    n_regionkey = r_regionkey
  |
  |----5:SCAN HDFS
  |       table=tpch.region #partitions=1/1 size=384B compact
  |       predicates: r_name = 'ASIA'
  |
  9:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    s_nationkey = n_nationkey
  |
  |----4:SCAN HDFS
  |       table=tpch.nation #partitions=1/1 size=2.15KB compact
  |
  8:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    s_nationkey = c_nationkey
  |    o_custkey = c_custkey
  |
  |----3:SCAN HDFS
  |       table=tpch.customer #partitions=1/1 size=23.08MB compact
  |
  7:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    l_suppkey = s_suppkey
  |
  |----2:SCAN HDFS
  |       table=tpch.supplier #partitions=1/1 size=1.33MB compact
  |
  6:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    l_orderkey = o_orderkey
  |
  |----1:SCAN HDFS
  |       table=tpch.orders #partitions=1/1 size=162.56MB compact
  |       predicates: o_orderdate >= '1994-01-01', o_orderdate < '1995-01-01'
  |
  0:SCAN HDFS
     table=tpch.lineitem #partitions=1/1 size=718.94MB
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  21:TOP-N
  |  order by: round(SUM(l_extendedprice * (1.0 - l_discount)), 5) DESC
  |  limit: 100
  |
  20:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: HASH_PARTITIONED: n_name

  STREAM DATA SINK
    EXCHANGE ID: 20
    UNPARTITIONED

  12:TOP-N
  |  order by: round(SUM(l_extendedprice * (1.0 - l_discount)), 5) DESC
  |  limit: 100
  |
  19:AGGREGATE (merge finalize)
  |  output: SUM(SUM(l_extendedprice * (1.0 - l_discount)))
  |  group by: n_name
  |
  18:EXCHANGE

PLAN FRAGMENT 2
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 18
    HASH_PARTITIONED: n_name

  11:AGGREGATE
  |  output: SUM(l_extendedprice * (1.0 - l_discount))
  |  group by: n_name
  |
  10:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    n_regionkey = r_regionkey
  |
  |----17:EXCHANGE
  |
  9:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    s_nationkey = n_nationkey
  |
  |----16:EXCHANGE
  |
  8:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    s_nationkey = c_nationkey
  |    o_custkey = c_custkey
  |
  |----15:EXCHANGE
  |
  7:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    l_suppkey = s_suppkey
  |
  |----14:EXCHANGE
  |
  6:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    l_orderkey = o_orderkey
  |
  |----13:EXCHANGE
  |
  0:SCAN HDFS
     table=tpch.lineitem #partitions=1/1 size=718.94MB

PLAN FRAGMENT 3
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 17
    UNPARTITIONED

  5:SCAN HDFS
     table=tpch.region #partitions=1/1 size=384B
     predicates: r_name = 'ASIA'

PLAN FRAGMENT 4
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 16
    UNPARTITIONED

  4:SCAN HDFS
     table=tpch.nation #partitions=1/1 size=2.15KB

PLAN FRAGMENT 5
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 15
    UNPARTITIONED

  3:SCAN HDFS
     table=tpch.customer #partitions=1/1 size=23.08MB

PLAN FRAGMENT 6
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 14
    UNPARTITIONED

  2:SCAN HDFS
     table=tpch.supplier #partitions=1/1 size=1.33MB

PLAN FRAGMENT 7
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 13
    UNPARTITIONED

  1:SCAN HDFS
     table=tpch.orders #partitions=1/1 size=162.56MB
     predicates: o_orderdate >= '1994-01-01', o_orderdate < '1995-01-01'
====
# Q6 - Forecasting Revenue Change Query
# Modifications: Added round() call
select round(sum(l_extendedprice * l_discount), 5) as revenue
from tpch.lineitem
where l_shipdate >= '1994-01-01' and
      l_shipdate < '1995-01-01' and
      l_discount >= 0.05 and
      l_discount <= 0.07 and
      l_quantity < 24
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  1:AGGREGATE (finalize)
  |  output: SUM(l_extendedprice * l_discount)
  |
  0:SCAN HDFS
     table=tpch.lineitem #partitions=1/1 size=718.94MB
     predicates: l_discount >= 0.05, l_discount <= 0.07, l_shipdate >= '1994-01-01', l_shipdate < '1995-01-01', l_quantity < 24.0
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  3:AGGREGATE (merge finalize)
  |  output: SUM(SUM(l_extendedprice * l_discount))
  |
  2:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 2
    UNPARTITIONED

  1:AGGREGATE
  |  output: SUM(l_extendedprice * l_discount)
  |
  0:SCAN HDFS
     table=tpch.lineitem #partitions=1/1 size=718.94MB
     predicates: l_discount >= 0.05, l_discount <= 0.07, l_shipdate >= '1994-01-01', l_shipdate < '1995-01-01', l_quantity < 24.0
====
# Q8 - National Market Share Query
# Modifications: Got rid of subquery, converted select from multiple tables to joins,
# added round() call
select
  year(o_orderdate) as o_year,
  round(sum(case when n2.n_name = 'BRAZIL' then l_extendedprice * (1 - l_discount)
                 else 0 end) / sum(l_extendedprice * (1 - l_discount)), 5) as mkt_share
from tpch.lineitem l
  join tpch.orders o
    on (l_orderkey = o_orderkey)
  join tpch.part p
    on (p_partkey = l_partkey)
  join tpch.supplier s
    on (s_suppkey = l_suppkey)
  join tpch.customer c
    on (o_custkey = c_custkey)
  join tpch.nation n1
    on (c_nationkey = n1.n_nationkey)
  join tpch.region r
    on (n1.n_regionkey = r_regionkey)
  join tpch.nation n2
    on (s_nationkey = n2.n_nationkey)
where
  r_name = 'AMERICA' and
  o_orderdate >= '1995-01-01' and
  o_orderdate < '1996-12-31' and
  p_type = 'ECONOMY ANODIZED STEEL'
group by
  o_year
order by
  o_year
limit 100
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  16:TOP-N
  |  order by: year(o_orderdate) ASC
  |  limit: 100
  |
  15:AGGREGATE (finalize)
  |  output: SUM(CASE WHEN n2.n_name = 'BRAZIL' THEN l_extendedprice * (1.0 - l_discount) ELSE 0.0 END), SUM(l_extendedprice * (1.0 - l_discount))
  |  group by: year(o_orderdate)
  |
  14:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    s_nationkey = n2.n_nationkey
  |
  |----7:SCAN HDFS
  |       table=tpch.nation #partitions=1/1 size=2.15KB compact
  |
  13:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    n1.n_regionkey = r_regionkey
  |
  |----6:SCAN HDFS
  |       table=tpch.region #partitions=1/1 size=384B compact
  |       predicates: r_name = 'AMERICA'
  |
  12:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    c_nationkey = n1.n_nationkey
  |
  |----5:SCAN HDFS
  |       table=tpch.nation #partitions=1/1 size=2.15KB compact
  |
  11:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    o_custkey = c_custkey
  |
  |----4:SCAN HDFS
  |       table=tpch.customer #partitions=1/1 size=23.08MB compact
  |
  10:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    l_suppkey = s_suppkey
  |
  |----3:SCAN HDFS
  |       table=tpch.supplier #partitions=1/1 size=1.33MB compact
  |
  9:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    l_orderkey = o_orderkey
  |
  |----1:SCAN HDFS
  |       table=tpch.orders #partitions=1/1 size=162.56MB compact
  |       predicates: o_orderdate >= '1995-01-01', o_orderdate < '1996-12-31'
  |
  8:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    l_partkey = p_partkey
  |
  |----2:SCAN HDFS
  |       table=tpch.part #partitions=1/1 size=22.83MB compact
  |       predicates: p_type = 'ECONOMY ANODIZED STEEL'
  |
  0:SCAN HDFS
     table=tpch.lineitem #partitions=1/1 size=718.94MB
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  29:TOP-N
  |  order by: year(o_orderdate) ASC
  |  limit: 100
  |
  28:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: HASH_PARTITIONED: year(o_orderdate)

  STREAM DATA SINK
    EXCHANGE ID: 28
    UNPARTITIONED

  16:TOP-N
  |  order by: year(o_orderdate) ASC
  |  limit: 100
  |
  27:AGGREGATE (merge finalize)
  |  output: SUM(SUM(CASE WHEN n2.n_name = 'BRAZIL' THEN l_extendedprice * (1.0 - l_discount) ELSE 0.0 END)), SUM(SUM(l_extendedprice * (1.0 - l_discount)))
  |  group by: year(o_orderdate)
  |
  26:EXCHANGE

PLAN FRAGMENT 2
  PARTITION: HASH_PARTITIONED: o_custkey

  STREAM DATA SINK
    EXCHANGE ID: 26
    HASH_PARTITIONED: year(o_orderdate)

  15:AGGREGATE
  |  output: SUM(CASE WHEN n2.n_name = 'BRAZIL' THEN l_extendedprice * (1.0 - l_discount) ELSE 0.0 END), SUM(l_extendedprice * (1.0 - l_discount))
  |  group by: year(o_orderdate)
  |
  14:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    s_nationkey = n2.n_nationkey
  |
  |----25:EXCHANGE
  |
  13:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    n1.n_regionkey = r_regionkey
  |
  |----24:EXCHANGE
  |
  12:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    c_nationkey = n1.n_nationkey
  |
  |----23:EXCHANGE
  |
  11:HASH JOIN
  |  join op: INNER JOIN (PARTITIONED)
  |  hash predicates:
  |    o_custkey = c_custkey
  |
  |----22:EXCHANGE
  |
  21:EXCHANGE

PLAN FRAGMENT 3
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 25
    UNPARTITIONED

  7:SCAN HDFS
     table=tpch.nation #partitions=1/1 size=2.15KB

PLAN FRAGMENT 4
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 24
    UNPARTITIONED

  6:SCAN HDFS
     table=tpch.region #partitions=1/1 size=384B
     predicates: r_name = 'AMERICA'

PLAN FRAGMENT 5
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 23
    UNPARTITIONED

  5:SCAN HDFS
     table=tpch.nation #partitions=1/1 size=2.15KB

PLAN FRAGMENT 6
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 22
    HASH_PARTITIONED: c_custkey

  4:SCAN HDFS
     table=tpch.customer #partitions=1/1 size=23.08MB

PLAN FRAGMENT 7
  PARTITION: HASH_PARTITIONED: l_suppkey

  STREAM DATA SINK
    EXCHANGE ID: 21
    HASH_PARTITIONED: o_custkey

  10:HASH JOIN
  |  join op: INNER JOIN (PARTITIONED)
  |  hash predicates:
  |    l_suppkey = s_suppkey
  |
  |----20:EXCHANGE
  |
  19:EXCHANGE

PLAN FRAGMENT 8
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 20
    HASH_PARTITIONED: s_suppkey

  3:SCAN HDFS
     table=tpch.supplier #partitions=1/1 size=1.33MB

PLAN FRAGMENT 9
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 19
    HASH_PARTITIONED: l_suppkey

  9:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    l_orderkey = o_orderkey
  |
  |----18:EXCHANGE
  |
  8:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    l_partkey = p_partkey
  |
  |----17:EXCHANGE
  |
  0:SCAN HDFS
     table=tpch.lineitem #partitions=1/1 size=718.94MB

PLAN FRAGMENT 10
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 18
    UNPARTITIONED

  1:SCAN HDFS
     table=tpch.orders #partitions=1/1 size=162.56MB
     predicates: o_orderdate >= '1995-01-01', o_orderdate < '1996-12-31'

PLAN FRAGMENT 11
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 17
    UNPARTITIONED

  2:SCAN HDFS
     table=tpch.part #partitions=1/1 size=22.83MB
     predicates: p_type = 'ECONOMY ANODIZED STEEL'
====
# Q9 - Product Type Measure Query
# Modifications: Removed subquery, converted selects from multiple tables to joins,
# added limit, added round()
select
  n.n_name as nation,
  year(o.o_orderdate) as o_year,
  round(sum(l.l_extendedprice * (1 - l.l_discount) -
            ps.ps_supplycost * l.l_quantity), 2) as sum_profit
from tpch.lineitem l
  join tpch.part p
    on (p.p_partkey = l.l_partkey)
  join tpch.orders o
    on (o.o_orderkey = l.l_orderkey)
  join tpch.partsupp ps
    on (ps.ps_suppkey = l.l_suppkey and ps.ps_partkey = l.l_partkey)
  join tpch.supplier s
    on (s.s_suppkey = l.l_suppkey)
  join tpch.nation n
    on (s.s_nationkey = n.n_nationkey)
where
  p.p_name like '%green%'
group by
  n.n_name,
  year(o.o_orderdate)
order by
  nation,
  o_year desc
limit 200
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  12:TOP-N
  |  order by: n.n_name ASC, year(o.o_orderdate) DESC
  |  limit: 200
  |
  11:AGGREGATE (finalize)
  |  output: SUM(l.l_extendedprice * (1.0 - l.l_discount) - ps.ps_supplycost * l.l_quantity)
  |  group by: n.n_name, year(o.o_orderdate)
  |
  10:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    l.l_suppkey = ps.ps_suppkey
  |    l.l_partkey = ps.ps_partkey
  |
  |----3:SCAN HDFS
  |       table=tpch.partsupp #partitions=1/1 size=112.71MB compact
  |
  9:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    s.s_nationkey = n.n_nationkey
  |
  |----5:SCAN HDFS
  |       table=tpch.nation #partitions=1/1 size=2.15KB compact
  |
  8:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    l.l_suppkey = s.s_suppkey
  |
  |----4:SCAN HDFS
  |       table=tpch.supplier #partitions=1/1 size=1.33MB compact
  |
  7:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    l.l_orderkey = o.o_orderkey
  |
  |----2:SCAN HDFS
  |       table=tpch.orders #partitions=1/1 size=162.56MB compact
  |
  6:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    l.l_partkey = p.p_partkey
  |
  |----1:SCAN HDFS
  |       table=tpch.part #partitions=1/1 size=22.83MB compact
  |       predicates: p.p_name LIKE '%green%'
  |
  0:SCAN HDFS
     table=tpch.lineitem #partitions=1/1 size=718.94MB
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  22:TOP-N
  |  order by: n.n_name ASC, year(o.o_orderdate) DESC
  |  limit: 200
  |
  21:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: HASH_PARTITIONED: n.n_name, year(o.o_orderdate)

  STREAM DATA SINK
    EXCHANGE ID: 21
    UNPARTITIONED

  12:TOP-N
  |  order by: n.n_name ASC, year(o.o_orderdate) DESC
  |  limit: 200
  |
  20:AGGREGATE (merge finalize)
  |  output: SUM(SUM(l.l_extendedprice * (1.0 - l.l_discount) - ps.ps_supplycost * l.l_quantity))
  |  group by: n.n_name, year(o.o_orderdate)
  |
  19:EXCHANGE

PLAN FRAGMENT 2
  PARTITION: HASH_PARTITIONED: l.l_orderkey

  STREAM DATA SINK
    EXCHANGE ID: 19
    HASH_PARTITIONED: n.n_name, year(o.o_orderdate)

  11:AGGREGATE
  |  output: SUM(l.l_extendedprice * (1.0 - l.l_discount) - ps.ps_supplycost * l.l_quantity)
  |  group by: n.n_name, year(o.o_orderdate)
  |
  10:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    l.l_suppkey = ps.ps_suppkey
  |    l.l_partkey = ps.ps_partkey
  |
  |----18:EXCHANGE
  |
  9:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    s.s_nationkey = n.n_nationkey
  |
  |----17:EXCHANGE
  |
  8:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    l.l_suppkey = s.s_suppkey
  |
  |----16:EXCHANGE
  |
  7:HASH JOIN
  |  join op: INNER JOIN (PARTITIONED)
  |  hash predicates:
  |    l.l_orderkey = o.o_orderkey
  |
  |----15:EXCHANGE
  |
  14:EXCHANGE

PLAN FRAGMENT 3
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 18
    UNPARTITIONED

  3:SCAN HDFS
     table=tpch.partsupp #partitions=1/1 size=112.71MB

PLAN FRAGMENT 4
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 17
    UNPARTITIONED

  5:SCAN HDFS
     table=tpch.nation #partitions=1/1 size=2.15KB

PLAN FRAGMENT 5
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 16
    UNPARTITIONED

  4:SCAN HDFS
     table=tpch.supplier #partitions=1/1 size=1.33MB

PLAN FRAGMENT 6
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 15
    HASH_PARTITIONED: o.o_orderkey

  2:SCAN HDFS
     table=tpch.orders #partitions=1/1 size=162.56MB

PLAN FRAGMENT 7
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 14
    HASH_PARTITIONED: l.l_orderkey

  6:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    l.l_partkey = p.p_partkey
  |
  |----13:EXCHANGE
  |
  0:SCAN HDFS
     table=tpch.lineitem #partitions=1/1 size=718.94MB

PLAN FRAGMENT 8
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 13
    UNPARTITIONED

  1:SCAN HDFS
     table=tpch.part #partitions=1/1 size=22.83MB
     predicates: p.p_name LIKE '%green%'
====
# Q10 - Returned Item Reporting Query
# Modifications: Cast c_acctbal to bigint due to float/double values not allowed in
# GROUP BY clause, added round() calls, converted select from multiple tables to
# joins
select
  c_custkey,
  c_name,
  round(sum(l_extendedprice * (1 - l_discount)), 5) as revenue,
  cast(c_acctbal as bigint) cast_c_acctbal,
  n_name,
  c_address,
  c_phone,
  c_comment
from tpch.lineitem l
  join tpch.orders o
    on (l.l_orderkey = o.o_orderkey)
  join tpch.customer c
    on (c.c_custkey = o.o_custkey)
  join tpch.nation n
    on (c.c_nationkey = n.n_nationkey)
where
  o.o_orderdate >= '1993-10-01' and
  o.o_orderdate < '1994-01-01' and
  l.l_returnflag = 'R'
group by
  c_custkey,
  c_name,
  cast(c_acctbal as bigint),
  c_phone,
  n_name,
  c_address,
  c_comment
order by
  revenue desc
limit 20
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  8:TOP-N
  |  order by: round(SUM(l_extendedprice * (1.0 - l_discount)), 5) DESC
  |  limit: 20
  |
  7:AGGREGATE (finalize)
  |  output: SUM(l_extendedprice * (1.0 - l_discount))
  |  group by: c_custkey, c_name, CAST(c_acctbal AS BIGINT), c_phone, n_name, c_address, c_comment
  |
  6:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    c.c_nationkey = n.n_nationkey
  |
  |----3:SCAN HDFS
  |       table=tpch.nation #partitions=1/1 size=2.15KB compact
  |
  5:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    o.o_custkey = c.c_custkey
  |
  |----2:SCAN HDFS
  |       table=tpch.customer #partitions=1/1 size=23.08MB compact
  |
  4:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    l.l_orderkey = o.o_orderkey
  |
  |----1:SCAN HDFS
  |       table=tpch.orders #partitions=1/1 size=162.56MB compact
  |       predicates: o.o_orderdate >= '1993-10-01', o.o_orderdate < '1994-01-01'
  |
  0:SCAN HDFS
     table=tpch.lineitem #partitions=1/1 size=718.94MB
     predicates: l.l_returnflag = 'R'
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  16:TOP-N
  |  order by: round(SUM(l_extendedprice * (1.0 - l_discount)), 5) DESC
  |  limit: 20
  |
  15:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: HASH_PARTITIONED: c_custkey, c_name, CAST(c_acctbal AS BIGINT), c_phone, n_name, c_address, c_comment

  STREAM DATA SINK
    EXCHANGE ID: 15
    UNPARTITIONED

  8:TOP-N
  |  order by: round(SUM(l_extendedprice * (1.0 - l_discount)), 5) DESC
  |  limit: 20
  |
  14:AGGREGATE (merge finalize)
  |  output: SUM(SUM(l_extendedprice * (1.0 - l_discount)))
  |  group by: c_custkey, c_name, CAST(c_acctbal AS BIGINT), c_phone, n_name, c_address, c_comment
  |
  13:EXCHANGE

PLAN FRAGMENT 2
  PARTITION: HASH_PARTITIONED: o.o_custkey

  STREAM DATA SINK
    EXCHANGE ID: 13
    HASH_PARTITIONED: c_custkey, c_name, CAST(c_acctbal AS BIGINT), c_phone, n_name, c_address, c_comment

  7:AGGREGATE
  |  output: SUM(l_extendedprice * (1.0 - l_discount))
  |  group by: c_custkey, c_name, CAST(c_acctbal AS BIGINT), c_phone, n_name, c_address, c_comment
  |
  6:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    c.c_nationkey = n.n_nationkey
  |
  |----12:EXCHANGE
  |
  5:HASH JOIN
  |  join op: INNER JOIN (PARTITIONED)
  |  hash predicates:
  |    o.o_custkey = c.c_custkey
  |
  |----11:EXCHANGE
  |
  10:EXCHANGE

PLAN FRAGMENT 3
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 12
    UNPARTITIONED

  3:SCAN HDFS
     table=tpch.nation #partitions=1/1 size=2.15KB

PLAN FRAGMENT 4
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 11
    HASH_PARTITIONED: c.c_custkey

  2:SCAN HDFS
     table=tpch.customer #partitions=1/1 size=23.08MB

PLAN FRAGMENT 5
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 10
    HASH_PARTITIONED: o.o_custkey

  4:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    l.l_orderkey = o.o_orderkey
  |
  |----9:EXCHANGE
  |
  0:SCAN HDFS
     table=tpch.lineitem #partitions=1/1 size=718.94MB
     predicates: l.l_returnflag = 'R'

PLAN FRAGMENT 6
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 9
    UNPARTITIONED

  1:SCAN HDFS
     table=tpch.orders #partitions=1/1 size=162.56MB
     predicates: o.o_orderdate >= '1993-10-01', o.o_orderdate < '1994-01-01'
====
# Q11 - Important Stock Identification
# TODO: Need to add part 2 of this query. It required some more advanced modifications.
insert overwrite table tpch.q11_part_tmp
select ps_partkey, sum(ps_supplycost * ps_availqty) as part_value
from tpch.nation n
join tpch.supplier s
  on s.s_nationkey = n.n_nationkey and n.n_name = 'GERMANY'
join tpch.partsupp ps
  on ps.ps_suppkey = s.s_suppkey
group by ps_partkey
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  WRITE TO HDFS table=tpch.q11_part_tmp
    overwrite=true

  5:AGGREGATE (finalize)
  |  output: SUM(ps_supplycost * ps_availqty)
  |  group by: ps_partkey
  |
  4:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    s.s_nationkey = n.n_nationkey
  |
  |----0:SCAN HDFS
  |       table=tpch.nation #partitions=1/1 size=2.15KB compact
  |       predicates: n.n_name = 'GERMANY'
  |
  3:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    ps.ps_suppkey = s.s_suppkey
  |
  |----1:SCAN HDFS
  |       table=tpch.supplier #partitions=1/1 size=1.33MB compact
  |
  2:SCAN HDFS
     table=tpch.partsupp #partitions=1/1 size=112.71MB
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: HASH_PARTITIONED: ps_partkey

  WRITE TO HDFS table=tpch.q11_part_tmp
    overwrite=true

  9:AGGREGATE (merge finalize)
  |  output: SUM(SUM(ps_supplycost * ps_availqty))
  |  group by: ps_partkey
  |
  8:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 8
    HASH_PARTITIONED: ps_partkey

  5:AGGREGATE
  |  output: SUM(ps_supplycost * ps_availqty)
  |  group by: ps_partkey
  |
  4:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    s.s_nationkey = n.n_nationkey
  |
  |----7:EXCHANGE
  |
  3:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    ps.ps_suppkey = s.s_suppkey
  |
  |----6:EXCHANGE
  |
  2:SCAN HDFS
     table=tpch.partsupp #partitions=1/1 size=112.71MB

PLAN FRAGMENT 2
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 7
    UNPARTITIONED

  0:SCAN HDFS
     table=tpch.nation #partitions=1/1 size=2.15KB
     predicates: n.n_name = 'GERMANY'

PLAN FRAGMENT 3
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 6
    UNPARTITIONED

  1:SCAN HDFS
     table=tpch.supplier #partitions=1/1 size=1.33MB
====
insert overwrite table tpch.q11_sum_tmp
select sum(part_value) as total_value
from tpch.q11_part_tmp
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  WRITE TO HDFS table=tpch.q11_sum_tmp
    overwrite=true

  1:AGGREGATE (finalize)
  |  output: SUM(part_value)
  |
  0:SCAN HDFS
     table=tpch.q11_part_tmp #partitions=1/1 size=509.47KB
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  WRITE TO HDFS table=tpch.q11_sum_tmp
    overwrite=true

  3:AGGREGATE (merge finalize)
  |  output: SUM(SUM(part_value))
  |
  2:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 2
    UNPARTITIONED

  1:AGGREGATE
  |  output: SUM(part_value)
  |
  0:SCAN HDFS
     table=tpch.q11_part_tmp #partitions=1/1 size=509.47KB
====
# Q12 - Shipping Mode and Order Priority Query
# Modifications: Converted select from multiple tables to joins, added limit
select l_shipmode,
sum(case
      when o_orderpriority ='1-URGENT' or
           o_orderpriority ='2-HIGH'
      then 1
      else 0
    end
) as high_line_count,
sum(case
      when o_orderpriority <> '1-URGENT' and
           o_orderpriority <> '2-HIGH'
      then 1
      else 0
    end
) as low_line_count
from tpch.lineitem l
  join tpch.orders o
    on (o.o_orderkey = l.l_orderkey and
        l.l_commitdate < l.l_receiptdate and
        l.l_shipdate < l.l_commitdate)
where
  (l.l_shipmode = 'MAIL' or l.l_shipmode = 'SHIP') and
   l.l_receiptdate >= '1994-01-01' and
   l.l_receiptdate < '1995-01-01'
group by
  l_shipmode
order by
  l_shipmode
limit 10
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  4:TOP-N
  |  order by: l_shipmode ASC
  |  limit: 10
  |
  3:AGGREGATE (finalize)
  |  output: SUM(CASE WHEN o_orderpriority = '1-URGENT' OR o_orderpriority = '2-HIGH' THEN 1 ELSE 0 END), SUM(CASE WHEN o_orderpriority != '1-URGENT' AND o_orderpriority != '2-HIGH' THEN 1 ELSE 0 END)
  |  group by: l_shipmode
  |
  2:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    o.o_orderkey = l.l_orderkey
  |
  |----0:SCAN HDFS
  |       table=tpch.lineitem #partitions=1/1 size=718.94MB compact
  |       predicates: l.l_receiptdate >= '1994-01-01', l.l_receiptdate < '1995-01-01', (l.l_shipmode = 'MAIL' OR l.l_shipmode = 'SHIP'), l.l_commitdate < l.l_receiptdate, l.l_shipdate < l.l_commitdate
  |
  1:SCAN HDFS
     table=tpch.orders #partitions=1/1 size=162.56MB
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  9:TOP-N
  |  order by: l_shipmode ASC
  |  limit: 10
  |
  8:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: HASH_PARTITIONED: l_shipmode

  STREAM DATA SINK
    EXCHANGE ID: 8
    UNPARTITIONED

  4:TOP-N
  |  order by: l_shipmode ASC
  |  limit: 10
  |
  7:AGGREGATE (merge finalize)
  |  output: SUM(SUM(CASE WHEN o_orderpriority = '1-URGENT' OR o_orderpriority = '2-HIGH' THEN 1 ELSE 0 END)), SUM(SUM(CASE WHEN o_orderpriority != '1-URGENT' AND o_orderpriority != '2-HIGH' THEN 1 ELSE 0 END))
  |  group by: l_shipmode
  |
  6:EXCHANGE

PLAN FRAGMENT 2
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 6
    HASH_PARTITIONED: l_shipmode

  3:AGGREGATE
  |  output: SUM(CASE WHEN o_orderpriority = '1-URGENT' OR o_orderpriority = '2-HIGH' THEN 1 ELSE 0 END), SUM(CASE WHEN o_orderpriority != '1-URGENT' AND o_orderpriority != '2-HIGH' THEN 1 ELSE 0 END)
  |  group by: l_shipmode
  |
  2:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    o.o_orderkey = l.l_orderkey
  |
  |----5:EXCHANGE
  |
  1:SCAN HDFS
     table=tpch.orders #partitions=1/1 size=162.56MB

PLAN FRAGMENT 3
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 5
    UNPARTITIONED

  0:SCAN HDFS
     table=tpch.lineitem #partitions=1/1 size=718.94MB
     predicates: l.l_receiptdate >= '1994-01-01', l.l_receiptdate < '1995-01-01', (l.l_shipmode = 'MAIL' OR l.l_shipmode = 'SHIP'), l.l_commitdate < l.l_receiptdate, l.l_shipdate < l.l_commitdate
====
# Q13 - Customer Distribution Query
select
  c_count,
  count(1) as custdist
from
  ( select
      c_custkey,
      count(o_orderkey) as c_count
    from tpch.orders o
    right outer join tpch.customer c
      on (c.c_custkey = o.o_custkey and o.o_comment not like '%special%requests%')
    group by
      c_custkey
  ) c_orders
group by
  c_count
order by
  custdist desc,
  c_count desc
limit 100
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  5:TOP-N
  |  order by: COUNT(1) DESC, c_count DESC
  |  limit: 100
  |
  4:AGGREGATE (finalize)
  |  output: COUNT(1)
  |  group by: COUNT(o_orderkey)
  |
  3:AGGREGATE (finalize)
  |  output: COUNT(o_orderkey)
  |  group by: c_custkey
  |
  2:HASH JOIN
  |  join op: RIGHT OUTER JOIN
  |  hash predicates:
  |    o.o_custkey = c.c_custkey
  |
  |----1:SCAN HDFS
  |       table=tpch.customer #partitions=1/1 size=23.08MB compact
  |
  0:SCAN HDFS
     table=tpch.orders #partitions=1/1 size=162.56MB
     predicates: NOT o.o_comment LIKE '%special%requests%'
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  13:TOP-N
  |  order by: COUNT(1) DESC, c_count DESC
  |  limit: 100
  |
  12:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: HASH_PARTITIONED: c_count

  STREAM DATA SINK
    EXCHANGE ID: 12
    UNPARTITIONED

  5:TOP-N
  |  order by: COUNT(1) DESC, c_count DESC
  |  limit: 100
  |
  11:AGGREGATE (merge finalize)
  |  output: SUM(COUNT(1))
  |  group by: c_count
  |
  10:EXCHANGE

PLAN FRAGMENT 2
  PARTITION: HASH_PARTITIONED: c_custkey

  STREAM DATA SINK
    EXCHANGE ID: 10
    HASH_PARTITIONED: c_count

  4:AGGREGATE
  |  output: COUNT(1)
  |  group by: COUNT(o_orderkey)
  |
  9:AGGREGATE (merge finalize)
  |  output: SUM(COUNT(o_orderkey))
  |  group by: c_custkey
  |
  8:EXCHANGE

PLAN FRAGMENT 3
  PARTITION: HASH_PARTITIONED: o.o_custkey

  STREAM DATA SINK
    EXCHANGE ID: 8
    HASH_PARTITIONED: c_custkey

  3:AGGREGATE
  |  output: COUNT(o_orderkey)
  |  group by: c_custkey
  |
  2:HASH JOIN
  |  join op: RIGHT OUTER JOIN (PARTITIONED)
  |  hash predicates:
  |    o.o_custkey = c.c_custkey
  |
  |----7:EXCHANGE
  |
  6:EXCHANGE

PLAN FRAGMENT 4
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 7
    HASH_PARTITIONED: c.c_custkey

  1:SCAN HDFS
     table=tpch.customer #partitions=1/1 size=23.08MB

PLAN FRAGMENT 5
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 6
    HASH_PARTITIONED: o.o_custkey

  0:SCAN HDFS
     table=tpch.orders #partitions=1/1 size=162.56MB
     predicates: NOT o.o_comment LIKE '%special%requests%'
====
# Q14 - Promotion Effect
select
round(100.00 * sum(case when p_type like 'PROMO%' then l_extendedprice*(1-l_discount)
             else 0.0
             end
             ) / sum(l_extendedprice * (1 - l_discount)), 5) as promo_revenue
from tpch.lineitem l
join tpch.part p
  on l.l_partkey = p.p_partkey and
     l.l_shipdate >= '1995-09-01' and
     l.l_shipdate < '1995-10-01'
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  3:AGGREGATE (finalize)
  |  output: SUM(CASE WHEN p_type LIKE 'PROMO%' THEN l_extendedprice * (1.0 - l_discount) ELSE 0.0 END), SUM(l_extendedprice * (1.0 - l_discount))
  |
  2:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    p.p_partkey = l.l_partkey
  |
  |----0:SCAN HDFS
  |       table=tpch.lineitem #partitions=1/1 size=718.94MB compact
  |       predicates: l.l_shipdate >= '1995-09-01', l.l_shipdate < '1995-10-01'
  |
  1:SCAN HDFS
     table=tpch.part #partitions=1/1 size=22.83MB
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  7:AGGREGATE (merge finalize)
  |  output: SUM(SUM(CASE WHEN p_type LIKE 'PROMO%' THEN l_extendedprice * (1.0 - l_discount) ELSE 0.0 END)), SUM(SUM(l_extendedprice * (1.0 - l_discount)))
  |
  6:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: HASH_PARTITIONED: p.p_partkey

  STREAM DATA SINK
    EXCHANGE ID: 6
    UNPARTITIONED

  3:AGGREGATE
  |  output: SUM(CASE WHEN p_type LIKE 'PROMO%' THEN l_extendedprice * (1.0 - l_discount) ELSE 0.0 END), SUM(l_extendedprice * (1.0 - l_discount))
  |
  2:HASH JOIN
  |  join op: INNER JOIN (PARTITIONED)
  |  hash predicates:
  |    p.p_partkey = l.l_partkey
  |
  |----5:EXCHANGE
  |
  4:EXCHANGE

PLAN FRAGMENT 2
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 5
    HASH_PARTITIONED: l.l_partkey

  0:SCAN HDFS
     table=tpch.lineitem #partitions=1/1 size=718.94MB
     predicates: l.l_shipdate >= '1995-09-01', l.l_shipdate < '1995-10-01'

PLAN FRAGMENT 3
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 4
    HASH_PARTITIONED: p.p_partkey

  1:SCAN HDFS
     table=tpch.part #partitions=1/1 size=22.83MB
====
# Q15 - Top Supplier Query
insert overwrite table tpch.revenue
select
  l_suppkey as supplier_no,
  sum(l_extendedprice * (1 - l_discount)) as total_revenue
from tpch.lineitem
where l_shipdate >= '1996-01-01' and l_shipdate < '1996-04-01'
group by l_suppkey
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  WRITE TO HDFS table=tpch.revenue
    overwrite=true

  1:AGGREGATE (finalize)
  |  output: SUM(l_extendedprice * (1.0 - l_discount))
  |  group by: l_suppkey
  |
  0:SCAN HDFS
     table=tpch.lineitem #partitions=1/1 size=718.94MB
     predicates: l_shipdate >= '1996-01-01', l_shipdate < '1996-04-01'
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: HASH_PARTITIONED: l_suppkey

  WRITE TO HDFS table=tpch.revenue
    overwrite=true

  3:AGGREGATE (merge finalize)
  |  output: SUM(SUM(l_extendedprice * (1.0 - l_discount)))
  |  group by: l_suppkey
  |
  2:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 2
    HASH_PARTITIONED: l_suppkey

  1:AGGREGATE
  |  output: SUM(l_extendedprice * (1.0 - l_discount))
  |  group by: l_suppkey
  |
  0:SCAN HDFS
     table=tpch.lineitem #partitions=1/1 size=718.94MB
     predicates: l_shipdate >= '1996-01-01', l_shipdate < '1996-04-01'
====
insert overwrite table tpch.max_revenue
select max(total_revenue)
from tpch.revenue
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  WRITE TO HDFS table=tpch.max_revenue
    overwrite=true

  1:AGGREGATE (finalize)
  |  output: MAX(total_revenue)
  |
  0:SCAN HDFS
     table=tpch.revenue #partitions=1/1 size=137.60KB
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  WRITE TO HDFS table=tpch.max_revenue
    overwrite=true

  3:AGGREGATE (merge finalize)
  |  output: MAX(MAX(total_revenue))
  |
  2:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 2
    UNPARTITIONED

  1:AGGREGATE
  |  output: MAX(total_revenue)
  |
  0:SCAN HDFS
     table=tpch.revenue #partitions=1/1 size=137.60KB
====
# Modifications - Added limit
select
  s_suppkey,
  s_name,
  s_address,
  s_phone,
  total_revenue
from tpch.supplier s
join tpch.revenue r
  on (s.s_suppkey = r.supplier_no)
join tpch.max_revenue m
  on (r.total_revenue = m.max_revenue)
order by s_suppkey
limit 100
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  5:TOP-N
  |  order by: s_suppkey ASC
  |  limit: 100
  |
  4:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    r.total_revenue = m.max_revenue
  |
  |----2:SCAN HDFS
  |       table=tpch.max_revenue #partitions=1/1 size=10B compact
  |
  3:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    s.s_suppkey = r.supplier_no
  |
  |----1:SCAN HDFS
  |       table=tpch.revenue #partitions=1/1 size=137.60KB compact
  |
  0:SCAN HDFS
     table=tpch.supplier #partitions=1/1 size=1.33MB
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  9:TOP-N
  |  order by: s_suppkey ASC
  |  limit: 100
  |
  8:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 8
    UNPARTITIONED

  5:TOP-N
  |  order by: s_suppkey ASC
  |  limit: 100
  |
  4:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    r.total_revenue = m.max_revenue
  |
  |----7:EXCHANGE
  |
  3:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    s.s_suppkey = r.supplier_no
  |
  |----6:EXCHANGE
  |
  0:SCAN HDFS
     table=tpch.supplier #partitions=1/1 size=1.33MB

PLAN FRAGMENT 2
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 7
    UNPARTITIONED

  2:SCAN HDFS
     table=tpch.max_revenue #partitions=1/1 size=10B

PLAN FRAGMENT 3
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 6
    UNPARTITIONED

  1:SCAN HDFS
     table=tpch.revenue #partitions=1/1 size=137.60KB
====
# Q16 - Parts/Supplier Relation Query
insert overwrite table tpch.supplier_tmp
select s_suppkey
from tpch.supplier
where not s_comment like '%Customer%Complaints%'
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  WRITE TO HDFS table=tpch.supplier_tmp
    overwrite=true

  0:SCAN HDFS
     table=tpch.supplier #partitions=1/1 size=1.33MB
     predicates: NOT s_comment LIKE '%Customer%Complaints%'
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: RANDOM

  WRITE TO HDFS table=tpch.supplier_tmp
    overwrite=true

  0:SCAN HDFS
     table=tpch.supplier #partitions=1/1 size=1.33MB
     predicates: NOT s_comment LIKE '%Customer%Complaints%'
====
insert overwrite table tpch.q16_tmp
select p_brand, p_type, p_size, ps_suppkey
from tpch.partsupp ps
join tpch.part p
  on p.p_partkey = ps.ps_partkey and
     p.p_brand <> 'Brand#45' and
     not p.p_type like 'MEDIUM POLISHED%'
join tpch.supplier_tmp s
  on ps.ps_suppkey = s.s_suppkey
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  WRITE TO HDFS table=tpch.q16_tmp
    overwrite=true

  4:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    ps.ps_suppkey = s.s_suppkey
  |
  |----2:SCAN HDFS
  |       table=tpch.supplier_tmp #partitions=1/1 size=47.73KB compact
  |
  3:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    ps.ps_partkey = p.p_partkey
  |
  |----1:SCAN HDFS
  |       table=tpch.part #partitions=1/1 size=22.83MB compact
  |       predicates: p.p_brand != 'Brand#45', NOT p.p_type LIKE 'MEDIUM POLISHED%'
  |
  0:SCAN HDFS
     table=tpch.partsupp #partitions=1/1 size=112.71MB
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: RANDOM

  WRITE TO HDFS table=tpch.q16_tmp
    overwrite=true

  4:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    ps.ps_suppkey = s.s_suppkey
  |
  |----6:EXCHANGE
  |
  3:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    ps.ps_partkey = p.p_partkey
  |
  |----5:EXCHANGE
  |
  0:SCAN HDFS
     table=tpch.partsupp #partitions=1/1 size=112.71MB

PLAN FRAGMENT 1
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 6
    UNPARTITIONED

  2:SCAN HDFS
     table=tpch.supplier_tmp #partitions=1/1 size=47.73KB

PLAN FRAGMENT 2
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 5
    UNPARTITIONED

  1:SCAN HDFS
     table=tpch.part #partitions=1/1 size=22.83MB
     predicates: p.p_brand != 'Brand#45', NOT p.p_type LIKE 'MEDIUM POLISHED%'
====
# Modifications: Added limit
select p_brand, p_type, p_size, count(distinct ps_suppkey) as supplier_cnt
from
( select * from tpch.q16_tmp
  where p_size = 49 or p_size = 14 or
        p_size = 23 or p_size = 45 or
        p_size = 19 or p_size = 3 or
        p_size = 36 or p_size = 9
) q16_all
group by p_brand, p_type, p_size
order by supplier_cnt desc, p_brand, p_type, p_size
limit 1000
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  3:TOP-N
  |  order by: COUNT(ps_suppkey) DESC, p_brand ASC, p_type ASC, p_size ASC
  |  limit: 1000
  |
  2:AGGREGATE (merge finalize)
  |  output: COUNT(ps_suppkey)
  |  group by: p_brand, p_type, p_size
  |
  1:AGGREGATE
  |  group by: tpch.q16_tmp.p_brand, tpch.q16_tmp.p_type, tpch.q16_tmp.p_size, tpch.q16_tmp.ps_suppkey
  |
  0:SCAN HDFS
     table=tpch.q16_tmp #partitions=1/1 size=27.10MB
     predicates: p_size = 49 OR p_size = 14 OR p_size = 23 OR p_size = 45 OR p_size = 19 OR p_size = 3 OR p_size = 36 OR p_size = 9
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  7:TOP-N
  |  order by: COUNT(ps_suppkey) DESC, p_brand ASC, p_type ASC, p_size ASC
  |  limit: 1000
  |
  6:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: HASH_PARTITIONED: p_brand, p_type, p_size

  STREAM DATA SINK
    EXCHANGE ID: 6
    UNPARTITIONED

  3:TOP-N
  |  order by: COUNT(ps_suppkey) DESC, p_brand ASC, p_type ASC, p_size ASC
  |  limit: 1000
  |
  2:AGGREGATE (merge finalize)
  |  output: COUNT(ps_suppkey)
  |  group by: p_brand, p_type, p_size
  |
  5:AGGREGATE (merge)
  |  group by: p_brand, p_type, p_size, ps_suppkey
  |
  4:EXCHANGE

PLAN FRAGMENT 2
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 4
    HASH_PARTITIONED: p_brand, p_type, p_size

  1:AGGREGATE
  |  group by: tpch.q16_tmp.p_brand, tpch.q16_tmp.p_type, tpch.q16_tmp.p_size, tpch.q16_tmp.ps_suppkey
  |
  0:SCAN HDFS
     table=tpch.q16_tmp #partitions=1/1 size=27.10MB
     predicates: p_size = 49 OR p_size = 14 OR p_size = 23 OR p_size = 45 OR p_size = 19 OR p_size = 3 OR p_size = 36 OR p_size = 9
====
# Q17 - Small-Quantity-Order Revenue Query
insert overwrite table tpch.lineitem_tmp
select l_partkey as t_partkey, 0.2 * avg(l_quantity) as t_avg_quantity
from tpch.lineitem
group by l_partkey
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  WRITE TO HDFS table=tpch.lineitem_tmp
    overwrite=true

  1:AGGREGATE (finalize)
  |  output: SUM(l_quantity), COUNT(l_quantity)
  |  group by: l_partkey
  |
  0:SCAN HDFS
     table=tpch.lineitem #partitions=1/1 size=718.94MB
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: HASH_PARTITIONED: l_partkey

  WRITE TO HDFS table=tpch.lineitem_tmp
    overwrite=true

  3:AGGREGATE (merge finalize)
  |  output: SUM(SUM(l_quantity)), SUM(COUNT(l_quantity))
  |  group by: l_partkey
  |
  2:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 2
    HASH_PARTITIONED: l_partkey

  1:AGGREGATE
  |  output: SUM(l_quantity), COUNT(l_quantity)
  |  group by: l_partkey
  |
  0:SCAN HDFS
     table=tpch.lineitem #partitions=1/1 size=718.94MB
====
# Modifications: Converted selects from multiple tables to joins,
# added round() call, removed subquery
select round(sum(l_extendedprice) / 7.0, 5) as avg_yearly
from tpch.lineitem l
  join tpch.part p
    on (p.p_partkey = l.l_partkey)
  join tpch.lineitem_tmp lt
    on (lt.t_partkey = p.p_partkey)
where
  p.p_brand = 'Brand#23' and
  p.p_container = 'MED BOX' and
  l.l_quantity < lt.t_avg_quantity
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  5:AGGREGATE (finalize)
  |  output: SUM(l_extendedprice)
  |
  4:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    p.p_partkey = lt.t_partkey
  |  other predicates: l.l_quantity < lt.t_avg_quantity
  |
  |----2:SCAN HDFS
  |       table=tpch.lineitem_tmp #partitions=1/1 size=2.18MB compact
  |
  3:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    l.l_partkey = p.p_partkey
  |
  |----1:SCAN HDFS
  |       table=tpch.part #partitions=1/1 size=22.83MB compact
  |       predicates: p.p_brand = 'Brand#23', p.p_container = 'MED BOX'
  |
  0:SCAN HDFS
     table=tpch.lineitem #partitions=1/1 size=718.94MB
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  9:AGGREGATE (merge finalize)
  |  output: SUM(SUM(l_extendedprice))
  |
  8:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 8
    UNPARTITIONED

  5:AGGREGATE
  |  output: SUM(l_extendedprice)
  |
  4:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    p.p_partkey = lt.t_partkey
  |  other predicates: l.l_quantity < lt.t_avg_quantity
  |
  |----7:EXCHANGE
  |
  3:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    l.l_partkey = p.p_partkey
  |
  |----6:EXCHANGE
  |
  0:SCAN HDFS
     table=tpch.lineitem #partitions=1/1 size=718.94MB

PLAN FRAGMENT 2
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 7
    UNPARTITIONED

  2:SCAN HDFS
     table=tpch.lineitem_tmp #partitions=1/1 size=2.18MB

PLAN FRAGMENT 3
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 6
    UNPARTITIONED

  1:SCAN HDFS
     table=tpch.part #partitions=1/1 size=22.83MB
     predicates: p.p_brand = 'Brand#23', p.p_container = 'MED BOX'
====
# Q18 - Large Value Customer Query
insert overwrite table tpch.q18_tmp
select l_orderkey, sum(l_quantity) as t_sum_quantity
from tpch.lineitem
group by l_orderkey
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  WRITE TO HDFS table=tpch.q18_tmp
    overwrite=true

  1:AGGREGATE (finalize)
  |  output: SUM(l_quantity)
  |  group by: l_orderkey
  |
  0:SCAN HDFS
     table=tpch.lineitem #partitions=1/1 size=718.94MB
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: HASH_PARTITIONED: l_orderkey

  WRITE TO HDFS table=tpch.q18_tmp
    overwrite=true

  3:AGGREGATE (merge finalize)
  |  output: SUM(SUM(l_quantity))
  |  group by: l_orderkey
  |
  2:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 2
    HASH_PARTITIONED: l_orderkey

  1:AGGREGATE
  |  output: SUM(l_quantity)
  |  group by: l_orderkey
  |
  0:SCAN HDFS
     table=tpch.lineitem #partitions=1/1 size=718.94MB
====
# Modifications: Cast o_totalprice column due to float/double values not
# allowed in GROUP BY.
select
  c_name,
  c_custkey,
  o_orderkey,
  o_orderdate,
  cast(o_totalprice as bigint) as total_price_bigint,
  round(sum(l_quantity), 5)
from tpch.lineitem l
  join tpch.orders o
    on (o.o_orderkey = l.l_orderkey)
  join tpch.customer c
    on (c.c_custkey = o.o_custkey)
  join tpch.q18_tmp t
    on (o.o_orderkey = t.l_orderkey and t.t_sum_quantity > 300)
group by
  c_name,
  c_custkey,
  o_orderkey,
  o_orderdate,
  cast(o_totalprice as bigint)
order by
  total_price_bigint,
  o_orderdate
limit 100
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  8:TOP-N
  |  order by: CAST(o_totalprice AS BIGINT) ASC, o_orderdate ASC
  |  limit: 100
  |
  7:AGGREGATE (finalize)
  |  output: SUM(l_quantity)
  |  group by: c_name, c_custkey, o_orderkey, o_orderdate, CAST(o_totalprice AS BIGINT)
  |
  6:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    o.o_orderkey = t.l_orderkey
  |
  |----3:SCAN HDFS
  |       table=tpch.q18_tmp #partitions=1/1 size=16.13MB compact
  |       predicates: t.t_sum_quantity > 300.0
  |
  5:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    o.o_custkey = c.c_custkey
  |
  |----2:SCAN HDFS
  |       table=tpch.customer #partitions=1/1 size=23.08MB compact
  |
  4:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    l.l_orderkey = o.o_orderkey
  |
  |----1:SCAN HDFS
  |       table=tpch.orders #partitions=1/1 size=162.56MB compact
  |
  0:SCAN HDFS
     table=tpch.lineitem #partitions=1/1 size=718.94MB
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  16:TOP-N
  |  order by: CAST(o_totalprice AS BIGINT) ASC, o_orderdate ASC
  |  limit: 100
  |
  15:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: HASH_PARTITIONED: c_name, c_custkey, o_orderkey, o_orderdate, CAST(o_totalprice AS BIGINT)

  STREAM DATA SINK
    EXCHANGE ID: 15
    UNPARTITIONED

  8:TOP-N
  |  order by: CAST(o_totalprice AS BIGINT) ASC, o_orderdate ASC
  |  limit: 100
  |
  14:AGGREGATE (merge finalize)
  |  output: SUM(SUM(l_quantity))
  |  group by: c_name, c_custkey, o_orderkey, o_orderdate, CAST(o_totalprice AS BIGINT)
  |
  13:EXCHANGE

PLAN FRAGMENT 2
  PARTITION: HASH_PARTITIONED: l.l_orderkey

  STREAM DATA SINK
    EXCHANGE ID: 13
    HASH_PARTITIONED: c_name, c_custkey, o_orderkey, o_orderdate, CAST(o_totalprice AS BIGINT)

  7:AGGREGATE
  |  output: SUM(l_quantity)
  |  group by: c_name, c_custkey, o_orderkey, o_orderdate, CAST(o_totalprice AS BIGINT)
  |
  6:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    o.o_orderkey = t.l_orderkey
  |
  |----12:EXCHANGE
  |
  5:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    o.o_custkey = c.c_custkey
  |
  |----11:EXCHANGE
  |
  4:HASH JOIN
  |  join op: INNER JOIN (PARTITIONED)
  |  hash predicates:
  |    l.l_orderkey = o.o_orderkey
  |
  |----10:EXCHANGE
  |
  9:EXCHANGE

PLAN FRAGMENT 3
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 12
    UNPARTITIONED

  3:SCAN HDFS
     table=tpch.q18_tmp #partitions=1/1 size=16.13MB
     predicates: t.t_sum_quantity > 300.0

PLAN FRAGMENT 4
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 11
    UNPARTITIONED

  2:SCAN HDFS
     table=tpch.customer #partitions=1/1 size=23.08MB

PLAN FRAGMENT 5
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 10
    HASH_PARTITIONED: o.o_orderkey

  1:SCAN HDFS
     table=tpch.orders #partitions=1/1 size=162.56MB

PLAN FRAGMENT 6
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 9
    HASH_PARTITIONED: l.l_orderkey

  0:SCAN HDFS
     table=tpch.lineitem #partitions=1/1 size=718.94MB
====
# Q19 - Discounted Revenue Query
# Modifications: Added round() calls
select round(sum(l_extendedprice * (1 - l_discount) ), 5) as revenue
from tpch.lineitem l
join tpch.part p
  on p.p_partkey = l.l_partkey
where
(
  p_brand = 'Brand#12'
  and p_container REGEXP 'SM CASE||SM BOX||SM PACK||SM PKG'
  and l_quantity >= 1 and l_quantity <= 11
  and p_size >= 1 and p_size <= 5
  and l_shipmode REGEXP 'AIR||AIR REG'
  and l_shipinstruct = 'DELIVER IN PERSON'
)
or
(
  p_brand = 'Brand#23'
  and p_container REGEXP 'MED BAG||MED BOX||MED PKG||MED PACK'
  and l_quantity >= 10 and l_quantity <= 20
  and p_size >= 1 and p_size <= 10
  and l_shipmode REGEXP 'AIR||AIR REG'
  and l_shipinstruct = 'DELIVER IN PERSON'
)
or
(
  p_brand = 'Brand#34'
  and p_container REGEXP 'LG CASE||LG BOX||LG PACK||LG PKG'
  and l_quantity >= 20 and l_quantity <= 30
  and p_size >= 1 and p_size <= 15
  and l_shipmode REGEXP 'AIR||AIR REG'
  and l_shipinstruct = 'DELIVER IN PERSON'
)
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  3:AGGREGATE (finalize)
  |  output: SUM(l_extendedprice * (1.0 - l_discount))
  |
  2:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    l.l_partkey = p.p_partkey
  |  other predicates: (p_brand = 'Brand#12' AND p_container REGEXP 'SM CASE||SM BOX||SM PACK||SM PKG' AND l_quantity >= 1.0 AND l_quantity <= 11.0 AND p_size >= 1 AND p_size <= 5 AND l_shipmode REGEXP 'AIR||AIR REG' AND l_shipinstruct = 'DELIVER IN PERSON') OR (p_brand = 'Brand#23' AND p_container REGEXP 'MED BAG||MED BOX||MED PKG||MED PACK' AND l_quantity >= 10.0 AND l_quantity <= 20.0 AND p_size >= 1 AND p_size <= 10 AND l_shipmode REGEXP 'AIR||AIR REG' AND l_shipinstruct = 'DELIVER IN PERSON') OR (p_brand = 'Brand#34' AND p_container REGEXP 'LG CASE||LG BOX||LG PACK||LG PKG' AND l_quantity >= 20.0 AND l_quantity <= 30.0 AND p_size >= 1 AND p_size <= 15 AND l_shipmode REGEXP 'AIR||AIR REG' AND l_shipinstruct = 'DELIVER IN PERSON')
  |
  |----1:SCAN HDFS
  |       table=tpch.part #partitions=1/1 size=22.83MB compact
  |
  0:SCAN HDFS
     table=tpch.lineitem #partitions=1/1 size=718.94MB
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  6:AGGREGATE (merge finalize)
  |  output: SUM(SUM(l_extendedprice * (1.0 - l_discount)))
  |
  5:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 5
    UNPARTITIONED

  3:AGGREGATE
  |  output: SUM(l_extendedprice * (1.0 - l_discount))
  |
  2:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    l.l_partkey = p.p_partkey
  |  other predicates: (p_brand = 'Brand#12' AND p_container REGEXP 'SM CASE||SM BOX||SM PACK||SM PKG' AND l_quantity >= 1.0 AND l_quantity <= 11.0 AND p_size >= 1 AND p_size <= 5 AND l_shipmode REGEXP 'AIR||AIR REG' AND l_shipinstruct = 'DELIVER IN PERSON') OR (p_brand = 'Brand#23' AND p_container REGEXP 'MED BAG||MED BOX||MED PKG||MED PACK' AND l_quantity >= 10.0 AND l_quantity <= 20.0 AND p_size >= 1 AND p_size <= 10 AND l_shipmode REGEXP 'AIR||AIR REG' AND l_shipinstruct = 'DELIVER IN PERSON') OR (p_brand = 'Brand#34' AND p_container REGEXP 'LG CASE||LG BOX||LG PACK||LG PKG' AND l_quantity >= 20.0 AND l_quantity <= 30.0 AND p_size >= 1 AND p_size <= 15 AND l_shipmode REGEXP 'AIR||AIR REG' AND l_shipinstruct = 'DELIVER IN PERSON')
  |
  |----4:EXCHANGE
  |
  0:SCAN HDFS
     table=tpch.lineitem #partitions=1/1 size=718.94MB

PLAN FRAGMENT 2
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 4
    UNPARTITIONED

  1:SCAN HDFS
     table=tpch.part #partitions=1/1 size=22.83MB
====
# QUERY_NAME : TPCH-Q20_QUERY_1
# Q20 - Potential Part Promotion Query
insert overwrite table tpch.q20_tmp1
select distinct p_partkey
from tpch.part
where p_name like 'forest%'
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  WRITE TO HDFS table=tpch.q20_tmp1
    overwrite=true

  1:AGGREGATE (finalize)
  |  group by: p_partkey
  |
  0:SCAN HDFS
     table=tpch.part #partitions=1/1 size=22.83MB
     predicates: p_name LIKE 'forest%'
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: HASH_PARTITIONED: p_partkey

  WRITE TO HDFS table=tpch.q20_tmp1
    overwrite=true

  3:AGGREGATE (merge finalize)
  |  group by: p_partkey
  |
  2:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 2
    HASH_PARTITIONED: p_partkey

  1:AGGREGATE
  |  group by: p_partkey
  |
  0:SCAN HDFS
     table=tpch.part #partitions=1/1 size=22.83MB
     predicates: p_name LIKE 'forest%'
====
# QUERY_NAME : TPCH-Q20_QUERY_2
insert overwrite table tpch.q20_tmp2
select
  l_partkey,
  l_suppkey,
  0.5 * sum(l_quantity)
from tpch.lineitem
where
  l_shipdate >= '1994-01-01' and
  l_shipdate < '1995-01-01'
group by
  l_partkey,
  l_suppkey
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  WRITE TO HDFS table=tpch.q20_tmp2
    overwrite=true

  1:AGGREGATE (finalize)
  |  output: SUM(l_quantity)
  |  group by: l_partkey, l_suppkey
  |
  0:SCAN HDFS
     table=tpch.lineitem #partitions=1/1 size=718.94MB
     predicates: l_shipdate >= '1994-01-01', l_shipdate < '1995-01-01'
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: HASH_PARTITIONED: l_partkey, l_suppkey

  WRITE TO HDFS table=tpch.q20_tmp2
    overwrite=true

  3:AGGREGATE (merge finalize)
  |  output: SUM(SUM(l_quantity))
  |  group by: l_partkey, l_suppkey
  |
  2:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 2
    HASH_PARTITIONED: l_partkey, l_suppkey

  1:AGGREGATE
  |  output: SUM(l_quantity)
  |  group by: l_partkey, l_suppkey
  |
  0:SCAN HDFS
     table=tpch.lineitem #partitions=1/1 size=718.94MB
     predicates: l_shipdate >= '1994-01-01', l_shipdate < '1995-01-01'
====
# QUERY_NAME : TPCH-Q20_QUERY_3
insert overwrite table tpch.q20_tmp3
select
  ps_suppkey,
  ps_availqty,
  sum_quantity
from tpch.partsupp ps
  join tpch.q20_tmp2 t2
    on (ps.ps_partkey = t2.l_partkey and ps.ps_suppkey = t2.l_suppkey)
  join tpch.q20_tmp1 t1
    on (ps.ps_partkey = t1.p_partkey)
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  WRITE TO HDFS table=tpch.q20_tmp3
    overwrite=true

  4:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    ps.ps_partkey = t1.p_partkey
  |
  |----2:SCAN HDFS
  |       table=tpch.q20_tmp1 #partitions=1/1 size=13.42KB compact
  |
  3:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    ps.ps_partkey = t2.l_partkey
  |    ps.ps_suppkey = t2.l_suppkey
  |
  |----1:SCAN HDFS
  |       table=tpch.q20_tmp2 #partitions=1/1 size=7.83MB compact
  |
  0:SCAN HDFS
     table=tpch.partsupp #partitions=1/1 size=112.71MB
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: RANDOM

  WRITE TO HDFS table=tpch.q20_tmp3
    overwrite=true

  4:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    ps.ps_partkey = t1.p_partkey
  |
  |----6:EXCHANGE
  |
  3:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    ps.ps_partkey = t2.l_partkey
  |    ps.ps_suppkey = t2.l_suppkey
  |
  |----5:EXCHANGE
  |
  0:SCAN HDFS
     table=tpch.partsupp #partitions=1/1 size=112.71MB

PLAN FRAGMENT 1
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 6
    UNPARTITIONED

  2:SCAN HDFS
     table=tpch.q20_tmp1 #partitions=1/1 size=13.42KB

PLAN FRAGMENT 2
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 5
    UNPARTITIONED

  1:SCAN HDFS
     table=tpch.q20_tmp2 #partitions=1/1 size=7.83MB
====
# QUERY_NAME : TPCH-Q20_QUERY_4
# Modified to use subquery to work around IMP-127
insert overwrite table tpch.q20_tmp4
select ps_suppkey
from tpch.q20_tmp3
where ps_availqty > sum_quantity
group by ps_suppkey
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  WRITE TO HDFS table=tpch.q20_tmp4
    overwrite=true

  1:AGGREGATE (finalize)
  |  group by: ps_suppkey
  |
  0:SCAN HDFS
     table=tpch.q20_tmp3 #partitions=1/1 size=77.49KB
     predicates: ps_availqty > sum_quantity
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: HASH_PARTITIONED: ps_suppkey

  WRITE TO HDFS table=tpch.q20_tmp4
    overwrite=true

  3:AGGREGATE (merge finalize)
  |  group by: ps_suppkey
  |
  2:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 2
    HASH_PARTITIONED: ps_suppkey

  1:AGGREGATE
  |  group by: ps_suppkey
  |
  0:SCAN HDFS
     table=tpch.q20_tmp3 #partitions=1/1 size=77.49KB
     predicates: ps_availqty > sum_quantity
====
# QUERY_NAME : TPCH-Q20_QUERY_5
# Modifications: Added limit
select
  s_name,
  s_address
from tpch.supplier s
  join tpch.nation n
    on (s.s_nationkey = n.n_nationkey and
        n.n_name = 'CANADA')
join tpch.q20_tmp4 t4
  on (s.s_suppkey = t4.ps_suppkey)
order by
  s_name
limit 100
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  5:TOP-N
  |  order by: s_name ASC
  |  limit: 100
  |
  4:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    s.s_suppkey = t4.ps_suppkey
  |
  |----2:SCAN HDFS
  |       table=tpch.q20_tmp4 #partitions=1/1 size=20.98KB compact
  |
  3:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    s.s_nationkey = n.n_nationkey
  |
  |----1:SCAN HDFS
  |       table=tpch.nation #partitions=1/1 size=2.15KB compact
  |       predicates: n.n_name = 'CANADA'
  |
  0:SCAN HDFS
     table=tpch.supplier #partitions=1/1 size=1.33MB
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  9:TOP-N
  |  order by: s_name ASC
  |  limit: 100
  |
  8:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 8
    UNPARTITIONED

  5:TOP-N
  |  order by: s_name ASC
  |  limit: 100
  |
  4:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    s.s_suppkey = t4.ps_suppkey
  |
  |----7:EXCHANGE
  |
  3:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    s.s_nationkey = n.n_nationkey
  |
  |----6:EXCHANGE
  |
  0:SCAN HDFS
     table=tpch.supplier #partitions=1/1 size=1.33MB

PLAN FRAGMENT 2
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 7
    UNPARTITIONED

  2:SCAN HDFS
     table=tpch.q20_tmp4 #partitions=1/1 size=20.98KB

PLAN FRAGMENT 3
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 6
    UNPARTITIONED

  1:SCAN HDFS
     table=tpch.nation #partitions=1/1 size=2.15KB
     predicates: n.n_name = 'CANADA'
====
# QUERY_NAME : TPCH-Q21
# Q21 - Suppliers Who Kept Orders Waiting Query
# Modifications: Converted 'EXISTS' into LEFT SEMI JOIN, converted
# NOT EXISTS into LEFT OUTER JOIN, changed selects from multiple tables to
# joins, added limit
select
  s_name,
  count(*) as numwait
from tpch.lineitem l1
  join tpch.supplier s
    on (s.s_suppkey = l1.l_suppkey)
  join tpch.orders o
    on (o.o_orderkey = l1.l_orderkey)
  join tpch.nation n
    on (s.s_nationkey = n.n_nationkey)
  left semi join tpch.lineitem l2
    on (l2.l_orderkey = l1.l_orderkey and
        l2.l_suppkey <> l1.l_suppkey)
  left outer join tpch.lineitem l3
    on (l3.l_orderkey = l1.l_orderkey and
        l3.l_suppkey <> l1.l_suppkey and
        l3.l_receiptdate > l3.l_commitdate)
where
  l3.l_orderkey is null and
  n_name = 'SAUDI ARABIA' and
  o_orderstatus = 'F'
group by
  s_name
order by
  numwait desc,
  s_name
limit 100
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  12:TOP-N
  |  order by: COUNT(*) DESC, s_name ASC
  |  limit: 100
  |
  11:AGGREGATE (finalize)
  |  output: COUNT(*)
  |  group by: s_name
  |
  10:HASH JOIN
  |  join op: LEFT OUTER JOIN
  |  hash predicates:
  |    l1.l_orderkey = l3.l_orderkey
  |  other join predicates: l3.l_suppkey != l1.l_suppkey
  |  other predicates: l3.l_orderkey IS NULL
  |
  |----5:SCAN HDFS
  |       table=tpch.lineitem #partitions=1/1 size=718.94MB compact
  |       predicates: l3.l_receiptdate > l3.l_commitdate
  |
  9:HASH JOIN
  |  join op: LEFT SEMI JOIN
  |  hash predicates:
  |    l1.l_orderkey = l2.l_orderkey
  |  other predicates: l2.l_suppkey != l1.l_suppkey
  |
  |----4:SCAN HDFS
  |       table=tpch.lineitem #partitions=1/1 size=718.94MB compact
  |
  8:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    s.s_nationkey = n.n_nationkey
  |
  |----3:SCAN HDFS
  |       table=tpch.nation #partitions=1/1 size=2.15KB compact
  |       predicates: n_name = 'SAUDI ARABIA'
  |
  7:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    l1.l_suppkey = s.s_suppkey
  |
  |----1:SCAN HDFS
  |       table=tpch.supplier #partitions=1/1 size=1.33MB compact
  |
  6:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    l1.l_orderkey = o.o_orderkey
  |
  |----2:SCAN HDFS
  |       table=tpch.orders #partitions=1/1 size=162.56MB compact
  |       predicates: o_orderstatus = 'F'
  |
  0:SCAN HDFS
     table=tpch.lineitem #partitions=1/1 size=718.94MB
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  22:TOP-N
  |  order by: COUNT(*) DESC, s_name ASC
  |  limit: 100
  |
  21:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: HASH_PARTITIONED: s_name

  STREAM DATA SINK
    EXCHANGE ID: 21
    UNPARTITIONED

  12:TOP-N
  |  order by: COUNT(*) DESC, s_name ASC
  |  limit: 100
  |
  20:AGGREGATE (merge finalize)
  |  output: SUM(COUNT(*))
  |  group by: s_name
  |
  19:EXCHANGE

PLAN FRAGMENT 2
  PARTITION: HASH_PARTITIONED: l1.l_orderkey

  STREAM DATA SINK
    EXCHANGE ID: 19
    HASH_PARTITIONED: s_name

  11:AGGREGATE
  |  output: COUNT(*)
  |  group by: s_name
  |
  10:HASH JOIN
  |  join op: LEFT OUTER JOIN (PARTITIONED)
  |  hash predicates:
  |    l1.l_orderkey = l3.l_orderkey
  |  other join predicates: l3.l_suppkey != l1.l_suppkey
  |  other predicates: l3.l_orderkey IS NULL
  |
  |----18:EXCHANGE
  |
  9:HASH JOIN
  |  join op: LEFT SEMI JOIN (PARTITIONED)
  |  hash predicates:
  |    l1.l_orderkey = l2.l_orderkey
  |  other predicates: l2.l_suppkey != l1.l_suppkey
  |
  |----17:EXCHANGE
  |
  16:EXCHANGE

PLAN FRAGMENT 3
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 18
    HASH_PARTITIONED: l3.l_orderkey

  5:SCAN HDFS
     table=tpch.lineitem #partitions=1/1 size=718.94MB
     predicates: l3.l_receiptdate > l3.l_commitdate

PLAN FRAGMENT 4
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 17
    HASH_PARTITIONED: l2.l_orderkey

  4:SCAN HDFS
     table=tpch.lineitem #partitions=1/1 size=718.94MB

PLAN FRAGMENT 5
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 16
    HASH_PARTITIONED: l1.l_orderkey

  8:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    s.s_nationkey = n.n_nationkey
  |
  |----15:EXCHANGE
  |
  7:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    l1.l_suppkey = s.s_suppkey
  |
  |----14:EXCHANGE
  |
  6:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    l1.l_orderkey = o.o_orderkey
  |
  |----13:EXCHANGE
  |
  0:SCAN HDFS
     table=tpch.lineitem #partitions=1/1 size=718.94MB

PLAN FRAGMENT 6
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 15
    UNPARTITIONED

  3:SCAN HDFS
     table=tpch.nation #partitions=1/1 size=2.15KB
     predicates: n_name = 'SAUDI ARABIA'

PLAN FRAGMENT 7
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 14
    UNPARTITIONED

  1:SCAN HDFS
     table=tpch.supplier #partitions=1/1 size=1.33MB

PLAN FRAGMENT 8
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 13
    UNPARTITIONED

  2:SCAN HDFS
     table=tpch.orders #partitions=1/1 size=162.56MB
     predicates: o_orderstatus = 'F'
====
# QUERY_NAME : TPCH-Q22_QUERY_1
# Q22 - Global Sales Opportunity Query
# Modifications: Added a cust_name_char column that will always have
# a constant value ('C') so that we can do a join between this table
# in the main query. This was needed because we only support equi-joins
# and had to have a column to join on.
insert overwrite table tpch.q22_customer_tmp1
select
  avg(c_acctbal) avg_acctbal,
  substr(c_name, 1, 1) as cust_name_char
from tpch.customer c
where
   c.c_acctbal > 0.00 and
   (substr(c.c_phone, 1, 2) = '13' or
    substr(c.c_phone, 1, 2) = '31' or
    substr(c.c_phone, 1, 2) = '23' or
    substr(c.c_phone, 1, 2) = '29' or
    substr(c.c_phone, 1, 2) = '30' or
    substr(c.c_phone, 1, 2) = '18' or
    substr(c.c_phone, 1, 2) = '17')
group by
  substr(c_name, 1, 1)
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  WRITE TO HDFS table=tpch.q22_customer_tmp1
    overwrite=true

  1:AGGREGATE (finalize)
  |  output: SUM(c_acctbal), COUNT(c_acctbal)
  |  group by: substr(c_name, 1, 1)
  |
  0:SCAN HDFS
     table=tpch.customer #partitions=1/1 size=23.08MB
     predicates: c.c_acctbal > 0.0, (substr(c.c_phone, 1, 2) = '13' OR substr(c.c_phone, 1, 2) = '31' OR substr(c.c_phone, 1, 2) = '23' OR substr(c.c_phone, 1, 2) = '29' OR substr(c.c_phone, 1, 2) = '30' OR substr(c.c_phone, 1, 2) = '18' OR substr(c.c_phone, 1, 2) = '17')
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: HASH_PARTITIONED: substr(c_name, 1, 1)

  WRITE TO HDFS table=tpch.q22_customer_tmp1
    overwrite=true

  3:AGGREGATE (merge finalize)
  |  output: SUM(SUM(c_acctbal)), SUM(COUNT(c_acctbal))
  |  group by: substr(c_name, 1, 1)
  |
  2:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 2
    HASH_PARTITIONED: substr(c_name, 1, 1)

  1:AGGREGATE
  |  output: SUM(c_acctbal), COUNT(c_acctbal)
  |  group by: substr(c_name, 1, 1)
  |
  0:SCAN HDFS
     table=tpch.customer #partitions=1/1 size=23.08MB
     predicates: c.c_acctbal > 0.0, (substr(c.c_phone, 1, 2) = '13' OR substr(c.c_phone, 1, 2) = '31' OR substr(c.c_phone, 1, 2) = '23' OR substr(c.c_phone, 1, 2) = '29' OR substr(c.c_phone, 1, 2) = '30' OR substr(c.c_phone, 1, 2) = '18' OR substr(c.c_phone, 1, 2) = '17')
====
# QUERY_NAME : TPCH-Q22_QUERY_2
# Modifications: Updated to use LEFT OUTER JOIN instead of NOT EXISTS,
# removed subquery by pushing aggregation up a level, added temp table
# to remove another subquery that computed the average account balance,
# added limit, added round()
select
  substring(c_phone, 1, 2) as cntrycode,
  count(*) as numcust,
  round(sum(c_acctbal), 4) as totacctbal
from tpch.customer c
  join tpch.q22_customer_tmp1 ct
    on (substr(c.c_name, 1, 1) = ct.cust_name_char)
  left outer join tpch.orders o
    on (o.o_custkey = c.c_custkey)
where
  o_custkey is null and
  c.c_acctbal > ct.avg_acctbal and
  (substr(c.c_phone, 1, 2) = '13' or
   substr(c.c_phone, 1, 2) = '31' or
   substr(c.c_phone, 1, 2) = '23' or
   substr(c.c_phone, 1, 2) = '29' or
   substr(c.c_phone, 1, 2) = '30' or
   substr(c.c_phone, 1, 2) = '18' or
   substr(c.c_phone, 1, 2) = '17')
group by
  substring(c_phone, 1, 2)
order by
  cntrycode
limit 100
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  6:TOP-N
  |  order by: substring(c_phone, 1, 2) ASC
  |  limit: 100
  |
  5:AGGREGATE (finalize)
  |  output: COUNT(*), SUM(c_acctbal)
  |  group by: substring(c_phone, 1, 2)
  |
  4:HASH JOIN
  |  join op: LEFT OUTER JOIN
  |  hash predicates:
  |    c.c_custkey = o.o_custkey
  |  other predicates: o_custkey IS NULL
  |
  |----2:SCAN HDFS
  |       table=tpch.orders #partitions=1/1 size=162.56MB compact
  |
  3:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    substr(c.c_name, 1, 1) = ct.cust_name_char
  |  other predicates: c.c_acctbal > ct.avg_acctbal
  |
  |----1:SCAN HDFS
  |       table=tpch.q22_customer_tmp1 #partitions=1/1 size=9B compact
  |
  0:SCAN HDFS
     table=tpch.customer #partitions=1/1 size=23.08MB
     predicates: (substr(c.c_phone, 1, 2) = '13' OR substr(c.c_phone, 1, 2) = '31' OR substr(c.c_phone, 1, 2) = '23' OR substr(c.c_phone, 1, 2) = '29' OR substr(c.c_phone, 1, 2) = '30' OR substr(c.c_phone, 1, 2) = '18' OR substr(c.c_phone, 1, 2) = '17')
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  13:TOP-N
  |  order by: substring(c_phone, 1, 2) ASC
  |  limit: 100
  |
  12:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: HASH_PARTITIONED: substring(c_phone, 1, 2)

  STREAM DATA SINK
    EXCHANGE ID: 12
    UNPARTITIONED

  6:TOP-N
  |  order by: substring(c_phone, 1, 2) ASC
  |  limit: 100
  |
  11:AGGREGATE (merge finalize)
  |  output: SUM(COUNT(*)), SUM(SUM(c_acctbal))
  |  group by: substring(c_phone, 1, 2)
  |
  10:EXCHANGE

PLAN FRAGMENT 2
  PARTITION: HASH_PARTITIONED: c.c_custkey

  STREAM DATA SINK
    EXCHANGE ID: 10
    HASH_PARTITIONED: substring(c_phone, 1, 2)

  5:AGGREGATE
  |  output: COUNT(*), SUM(c_acctbal)
  |  group by: substring(c_phone, 1, 2)
  |
  4:HASH JOIN
  |  join op: LEFT OUTER JOIN (PARTITIONED)
  |  hash predicates:
  |    c.c_custkey = o.o_custkey
  |  other predicates: o_custkey IS NULL
  |
  |----9:EXCHANGE
  |
  8:EXCHANGE

PLAN FRAGMENT 3
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 9
    HASH_PARTITIONED: o.o_custkey

  2:SCAN HDFS
     table=tpch.orders #partitions=1/1 size=162.56MB

PLAN FRAGMENT 4
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 8
    HASH_PARTITIONED: c.c_custkey

  3:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    substr(c.c_name, 1, 1) = ct.cust_name_char
  |  other predicates: c.c_acctbal > ct.avg_acctbal
  |
  |----7:EXCHANGE
  |
  0:SCAN HDFS
     table=tpch.customer #partitions=1/1 size=23.08MB
     predicates: (substr(c.c_phone, 1, 2) = '13' OR substr(c.c_phone, 1, 2) = '31' OR substr(c.c_phone, 1, 2) = '23' OR substr(c.c_phone, 1, 2) = '29' OR substr(c.c_phone, 1, 2) = '30' OR substr(c.c_phone, 1, 2) = '18' OR substr(c.c_phone, 1, 2) = '17')

PLAN FRAGMENT 5
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 7
    UNPARTITIONED

  1:SCAN HDFS
     table=tpch.q22_customer_tmp1 #partitions=1/1 size=9B
====
