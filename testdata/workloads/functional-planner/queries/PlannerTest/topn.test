select name, zip
from functional.testtbl
order by name
limit 1
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  1:TOP-N
  |  order by: name ASC
  |  limit: 1
  |
  0:SCAN HDFS
     table=functional.testtbl #partitions=0/1 size=0B
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  3:TOP-N
  |  order by: name ASC
  |  limit: 1
  |
  2:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 2
    UNPARTITIONED

  1:TOP-N
  |  order by: name ASC
  |  limit: 1
  |
  0:SCAN HDFS
     table=functional.testtbl #partitions=0/1 size=0B
====
select zip, count(*)
from functional.testtbl
where name like 'm%'
group by 1
order by 2 desc
limit 10
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  2:TOP-N
  |  order by: COUNT(*) DESC
  |  limit: 10
  |
  1:AGGREGATE (finalize)
  |  output: COUNT(*)
  |  group by: zip
  |
  0:SCAN HDFS
     table=functional.testtbl #partitions=0/1 size=0B
     predicates: name LIKE 'm%'
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  6:TOP-N
  |  order by: COUNT(*) DESC
  |  limit: 10
  |
  5:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: HASH_PARTITIONED: zip

  STREAM DATA SINK
    EXCHANGE ID: 5
    UNPARTITIONED

  2:TOP-N
  |  order by: COUNT(*) DESC
  |  limit: 10
  |
  4:AGGREGATE (merge finalize)
  |  output: SUM(COUNT(*))
  |  group by: zip
  |
  3:EXCHANGE

PLAN FRAGMENT 2
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 3
    HASH_PARTITIONED: zip

  1:AGGREGATE
  |  output: COUNT(*)
  |  group by: zip
  |
  0:SCAN HDFS
     table=functional.testtbl #partitions=0/1 size=0B
     predicates: name LIKE 'm%'
====
select int_col, sum(float_col)
from functional_hbase.alltypessmall
where id < 5
group by 1
order by 2
limit 4
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  2:TOP-N
  |  order by: SUM(float_col) ASC
  |  limit: 4
  |
  1:AGGREGATE (finalize)
  |  output: SUM(float_col)
  |  group by: int_col
  |
  0:SCAN HBASE
     table:alltypessmall
     predicates: id < 5
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  6:TOP-N
  |  order by: SUM(float_col) ASC
  |  limit: 4
  |
  5:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: HASH_PARTITIONED: int_col

  STREAM DATA SINK
    EXCHANGE ID: 5
    UNPARTITIONED

  2:TOP-N
  |  order by: SUM(float_col) ASC
  |  limit: 4
  |
  4:AGGREGATE (merge finalize)
  |  output: SUM(SUM(float_col))
  |  group by: int_col
  |
  3:EXCHANGE

PLAN FRAGMENT 2
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 3
    HASH_PARTITIONED: int_col

  1:AGGREGATE
  |  output: SUM(float_col)
  |  group by: int_col
  |
  0:SCAN HBASE
     table:alltypessmall
     predicates: id < 5
====
select int_col, sum(float_col), min(float_col)
from functional_hbase.alltypessmall
group by 1
order by 2,3 desc
limit 0
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  2:TOP-N
  |  order by: SUM(float_col) ASC, MIN(float_col) DESC
  |  limit: 0
  |
  1:AGGREGATE (finalize)
  |  output: SUM(float_col), MIN(float_col)
  |  group by: int_col
  |
  0:SCAN HBASE
     table:alltypessmall
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  6:TOP-N
  |  order by: SUM(float_col) ASC, MIN(float_col) DESC
  |  limit: 0
  |
  5:EXCHANGE

PLAN FRAGMENT 1
  PARTITION: HASH_PARTITIONED: int_col

  STREAM DATA SINK
    EXCHANGE ID: 5
    UNPARTITIONED

  2:TOP-N
  |  order by: SUM(float_col) ASC, MIN(float_col) DESC
  |  limit: 0
  |
  4:AGGREGATE (merge finalize)
  |  output: SUM(SUM(float_col)), MIN(MIN(float_col))
  |  group by: int_col
  |
  3:EXCHANGE

PLAN FRAGMENT 2
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 3
    HASH_PARTITIONED: int_col

  1:AGGREGATE
  |  output: SUM(float_col), MIN(float_col)
  |  group by: int_col
  |
  0:SCAN HBASE
     table:alltypessmall
====
