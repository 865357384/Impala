# correct placement of predicates with left outer joins; t2 and t3 are nullable
select *
from functional.testtbl t1 left outer join functional.testtbl t2 on (
    t1.id - 1 = t2.id + 1
# lhs predicate is join predicate
    and t1.zip = 94611
# rhs predicate applied by rhs scan
    and t2.zip = 94104)
  left outer join functional.testtbl t3 on (
    t1.id = t3.id
# predicate on t2 is join predicate
    and t2.id = 15
# predicate on t1 and t2 is join predicate
    and t1.id - t2.id = 0
# rhs predicate applied by rhs scan
    and t3.zip = 94720
  )
where
# t1 predicate in where clause is applied by scan
t1.id > 0
# t2 predicate in where clause is applied after join
and t2.id is null
# t3 predicate in where clause is applied after join
and t3.id is not null
# join predicate between t1 and t2 applied after t2 join
and t1.zip + t2.zip = 10
# join predicate between t1, t2 and t3 applied after last join
and t1.zip + t2.zip + t3.zip= 20
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  4:HASH JOIN
  |  join op: LEFT OUTER JOIN
  |  hash predicates:
  |    t1.id = t3.id
  |  other join predicates: t2.id = 15, t1.id - t2.id = 0
  |  other predicates: t3.id IS NOT NULL, t1.zip + t2.zip + t3.zip = 20
  |  tuple ids: 0 1N 2N
  |
  |----3:SCAN HDFS
  |       table=functional.testtbl #partitions=0 size=0B compact
  |       predicates: t3.zip = 94720
  |       tuple ids: 2
  |
  2:HASH JOIN
  |  join op: LEFT OUTER JOIN
  |  hash predicates:
  |    t1.id - 1 = t2.id + 1
  |  other join predicates: t1.zip = 94611
  |  other predicates: t2.id IS NULL, t1.zip + t2.zip = 10
  |  tuple ids: 0 1N
  |
  |----1:SCAN HDFS
  |       table=functional.testtbl #partitions=0 size=0B compact
  |       predicates: t2.zip = 94104
  |       tuple ids: 1
  |
  0:SCAN HDFS
     table=functional.testtbl #partitions=0 size=0B
     predicates: t1.id > 0
     tuple ids: 0
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  7:EXCHANGE
     tuple ids: 0 1N 2N

PLAN FRAGMENT 1
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 7
    UNPARTITIONED

  4:HASH JOIN
  |  join op: LEFT OUTER JOIN (BROADCAST)
  |  hash predicates:
  |    t1.id = t3.id
  |  other join predicates: t2.id = 15, t1.id - t2.id = 0
  |  other predicates: t3.id IS NOT NULL, t1.zip + t2.zip + t3.zip = 20
  |  tuple ids: 0 1N 2N
  |
  |----6:EXCHANGE
  |       tuple ids: 2
  |
  2:HASH JOIN
  |  join op: LEFT OUTER JOIN (BROADCAST)
  |  hash predicates:
  |    t1.id - 1 = t2.id + 1
  |  other join predicates: t1.zip = 94611
  |  other predicates: t2.id IS NULL, t1.zip + t2.zip = 10
  |  tuple ids: 0 1N
  |
  |----5:EXCHANGE
  |       tuple ids: 1
  |
  0:SCAN HDFS
     table=functional.testtbl #partitions=0 size=0B
     predicates: t1.id > 0
     tuple ids: 0

PLAN FRAGMENT 2
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 6
    UNPARTITIONED

  3:SCAN HDFS
     table=functional.testtbl #partitions=0 size=0B
     predicates: t3.zip = 94720
     tuple ids: 2

PLAN FRAGMENT 3
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 5
    UNPARTITIONED

  1:SCAN HDFS
     table=functional.testtbl #partitions=0 size=0B
     predicates: t2.zip = 94104
     tuple ids: 1
---- SCANRANGELOCATIONS
NODE 0:
NODE 1:
NODE 3:
====
# the same thing with subqueries; should produce the same result
select *
from (select * from functional.testtbl a1) t1 left outer join (select * from functional.testtbl a2) t2 on (
    t1.id - 1 = t2.id + 1 and t1.zip = 94611 and t2.zip = 94104)
  left outer join (select * from functional.testtbl a3) t3 on (
    t1.id = t3.id and t2.id = 15 and t1.id - t2.id = 0 and t3.zip = 94720)
where t1.id > 0 and t2.id is null and t3.id is not null
and t1.zip + t2.zip = 10 and t1.zip + t2.zip + t3.zip= 20
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  4:HASH JOIN
  |  join op: LEFT OUTER JOIN
  |  hash predicates:
  |    a1.id = a3.id
  |  other join predicates: a2.id = 15, a1.id - a2.id = 0
  |  other predicates: a3.id IS NOT NULL, a1.zip + a2.zip + a3.zip = 20
  |  tuple ids: 0 2N 4N
  |
  |----3:SCAN HDFS
  |       table=functional.testtbl #partitions=0 size=0B compact
  |       predicates: a3.zip = 94720
  |       tuple ids: 4
  |
  2:HASH JOIN
  |  join op: LEFT OUTER JOIN
  |  hash predicates:
  |    a1.id - 1 = a2.id + 1
  |  other join predicates: a1.zip = 94611
  |  other predicates: a2.id IS NULL, a1.zip + a2.zip = 10
  |  tuple ids: 0 2N
  |
  |----1:SCAN HDFS
  |       table=functional.testtbl #partitions=0 size=0B compact
  |       predicates: a2.zip = 94104
  |       tuple ids: 2
  |
  0:SCAN HDFS
     table=functional.testtbl #partitions=0 size=0B
     predicates: a1.id > 0
     tuple ids: 0
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  7:EXCHANGE
     tuple ids: 0 2N 4N

PLAN FRAGMENT 1
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 7
    UNPARTITIONED

  4:HASH JOIN
  |  join op: LEFT OUTER JOIN (BROADCAST)
  |  hash predicates:
  |    a1.id = a3.id
  |  other join predicates: a2.id = 15, a1.id - a2.id = 0
  |  other predicates: a3.id IS NOT NULL, a1.zip + a2.zip + a3.zip = 20
  |  tuple ids: 0 2N 4N
  |
  |----6:EXCHANGE
  |       tuple ids: 4
  |
  2:HASH JOIN
  |  join op: LEFT OUTER JOIN (BROADCAST)
  |  hash predicates:
  |    a1.id - 1 = a2.id + 1
  |  other join predicates: a1.zip = 94611
  |  other predicates: a2.id IS NULL, a1.zip + a2.zip = 10
  |  tuple ids: 0 2N
  |
  |----5:EXCHANGE
  |       tuple ids: 2
  |
  0:SCAN HDFS
     table=functional.testtbl #partitions=0 size=0B
     predicates: a1.id > 0
     tuple ids: 0

PLAN FRAGMENT 2
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 6
    UNPARTITIONED

  3:SCAN HDFS
     table=functional.testtbl #partitions=0 size=0B
     predicates: a3.zip = 94720
     tuple ids: 4

PLAN FRAGMENT 3
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 5
    UNPARTITIONED

  1:SCAN HDFS
     table=functional.testtbl #partitions=0 size=0B
     predicates: a2.zip = 94104
     tuple ids: 2
---- SCANRANGELOCATIONS
NODE 0:
NODE 1:
NODE 3:
====
# correct placement of predicates with right outer joins; t1 and t2 are nullable
select *
from functional.testtbl t1 right outer join functional.testtbl t2 on (
    t1.id - 1 = t2.id + 1
# lhs predicate is scan predicate
    and t1.zip = 94611
# rhs predicate is join predicate
    and t2.zip = 94104)
  right outer join functional.testtbl t3 on (
    t1.id = t3.id
# predicate on t2 is scan predicate
    and t2.id = 15
# predicate on t1 and t2 could be applied by previous join
# but the planner doesn't recognize that case and makes it a join predicate
    and t1.id - t2.id = 0
# rhs predicate is join predicate
    and t3.zip = 94720
  )
where
# t1 predicate in where clause is applied by last last
t1.id > 0
# t2 predicate in where clause is applied by last last
and t2.id is null
# t3 predicate in where clause is applied by scan
and t3.id is not null
# join predicate between t1 and t2 applied after last join
and t1.zip + t2.zip = 10
# join predicate between t1, t2 and t3 applied after last join
and t1.zip + t2.zip + t3.zip= 20
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  4:HASH JOIN
  |  join op: RIGHT OUTER JOIN
  |  hash predicates:
  |    t1.id = t3.id
  |  other join predicates: t1.id - t2.id = 0, t3.zip = 94720
  |  other predicates: t1.id > 0, t2.id IS NULL, t1.zip + t2.zip = 10, t1.zip + t2.zip + t3.zip = 20
  |  tuple ids: 0N 1N 2
  |
  |----3:SCAN HDFS
  |       table=functional.testtbl #partitions=0 size=0B compact
  |       predicates: t3.id IS NOT NULL
  |       tuple ids: 2
  |
  2:HASH JOIN
  |  join op: RIGHT OUTER JOIN
  |  hash predicates:
  |    t1.id - 1 = t2.id + 1
  |  other join predicates: t2.zip = 94104
  |  tuple ids: 0N 1
  |
  |----1:SCAN HDFS
  |       table=functional.testtbl #partitions=0 size=0B compact
  |       predicates: t2.id = 15
  |       tuple ids: 1
  |
  0:SCAN HDFS
     table=functional.testtbl #partitions=0 size=0B
     predicates: t1.zip = 94611
     tuple ids: 0
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  9:EXCHANGE
     tuple ids: 0N 1N 2

PLAN FRAGMENT 1
  PARTITION: HASH_PARTITIONED: t1.id

  STREAM DATA SINK
    EXCHANGE ID: 9
    UNPARTITIONED

  4:HASH JOIN
  |  join op: RIGHT OUTER JOIN (PARTITIONED)
  |  hash predicates:
  |    t1.id = t3.id
  |  other join predicates: t1.id - t2.id = 0, t3.zip = 94720
  |  other predicates: t1.id > 0, t2.id IS NULL, t1.zip + t2.zip = 10, t1.zip + t2.zip + t3.zip = 20
  |  tuple ids: 0N 1N 2
  |
  |----8:EXCHANGE
  |       tuple ids: 2
  |
  7:EXCHANGE
     tuple ids: 0N 1

PLAN FRAGMENT 2
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 8
    HASH_PARTITIONED: t3.id

  3:SCAN HDFS
     table=functional.testtbl #partitions=0 size=0B
     predicates: t3.id IS NOT NULL
     tuple ids: 2

PLAN FRAGMENT 3
  PARTITION: HASH_PARTITIONED: t1.id - 1

  STREAM DATA SINK
    EXCHANGE ID: 7
    HASH_PARTITIONED: t1.id

  2:HASH JOIN
  |  join op: RIGHT OUTER JOIN (PARTITIONED)
  |  hash predicates:
  |    t1.id - 1 = t2.id + 1
  |  other join predicates: t2.zip = 94104
  |  tuple ids: 0N 1
  |
  |----6:EXCHANGE
  |       tuple ids: 1
  |
  5:EXCHANGE
     tuple ids: 0

PLAN FRAGMENT 4
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 6
    HASH_PARTITIONED: t2.id + 1

  1:SCAN HDFS
     table=functional.testtbl #partitions=0 size=0B
     predicates: t2.id = 15
     tuple ids: 1

PLAN FRAGMENT 5
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 5
    HASH_PARTITIONED: t1.id - 1

  0:SCAN HDFS
     table=functional.testtbl #partitions=0 size=0B
     predicates: t1.zip = 94611
     tuple ids: 0
---- SCANRANGELOCATIONS
NODE 0:
NODE 1:
NODE 3:
====
# the same thing with subqueries; should produce the same result
select *
from (select * from functional.testtbl a1) t1 right outer join (select * from functional.testtbl a2) t2 on (
    t1.id - 1 = t2.id + 1 and t1.zip = 94611 and t2.zip = 94104)
  right outer join (select * from functional.testtbl a3) t3 on (
    t1.id = t3.id and t2.id = 15 and t1.id - t2.id = 0 and t3.zip = 94720 )
where t1.id > 0 and t2.id is null and t3.id is not null
and t1.zip + t2.zip = 10 and t1.zip + t2.zip + t3.zip= 20
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  4:HASH JOIN
  |  join op: RIGHT OUTER JOIN
  |  hash predicates:
  |    a1.id = a3.id
  |  other join predicates: a1.id - a2.id = 0, a3.zip = 94720
  |  other predicates: a1.id > 0, a2.id IS NULL, a1.zip + a2.zip = 10, a1.zip + a2.zip + a3.zip = 20
  |  tuple ids: 0N 2N 4
  |
  |----3:SCAN HDFS
  |       table=functional.testtbl #partitions=0 size=0B compact
  |       predicates: a3.id IS NOT NULL
  |       tuple ids: 4
  |
  2:HASH JOIN
  |  join op: RIGHT OUTER JOIN
  |  hash predicates:
  |    a1.id - 1 = a2.id + 1
  |  other join predicates: a2.zip = 94104
  |  tuple ids: 0N 2
  |
  |----1:SCAN HDFS
  |       table=functional.testtbl #partitions=0 size=0B compact
  |       predicates: a2.id = 15
  |       tuple ids: 2
  |
  0:SCAN HDFS
     table=functional.testtbl #partitions=0 size=0B
     predicates: a1.zip = 94611
     tuple ids: 0
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  9:EXCHANGE
     tuple ids: 0N 2N 4

PLAN FRAGMENT 1
  PARTITION: HASH_PARTITIONED: a1.id

  STREAM DATA SINK
    EXCHANGE ID: 9
    UNPARTITIONED

  4:HASH JOIN
  |  join op: RIGHT OUTER JOIN (PARTITIONED)
  |  hash predicates:
  |    a1.id = a3.id
  |  other join predicates: a1.id - a2.id = 0, a3.zip = 94720
  |  other predicates: a1.id > 0, a2.id IS NULL, a1.zip + a2.zip = 10, a1.zip + a2.zip + a3.zip = 20
  |  tuple ids: 0N 2N 4
  |
  |----8:EXCHANGE
  |       tuple ids: 4
  |
  7:EXCHANGE
     tuple ids: 0N 2

PLAN FRAGMENT 2
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 8
    HASH_PARTITIONED: a3.id

  3:SCAN HDFS
     table=functional.testtbl #partitions=0 size=0B
     predicates: a3.id IS NOT NULL
     tuple ids: 4

PLAN FRAGMENT 3
  PARTITION: HASH_PARTITIONED: a1.id - 1

  STREAM DATA SINK
    EXCHANGE ID: 7
    HASH_PARTITIONED: a1.id

  2:HASH JOIN
  |  join op: RIGHT OUTER JOIN (PARTITIONED)
  |  hash predicates:
  |    a1.id - 1 = a2.id + 1
  |  other join predicates: a2.zip = 94104
  |  tuple ids: 0N 2
  |
  |----6:EXCHANGE
  |       tuple ids: 2
  |
  5:EXCHANGE
     tuple ids: 0

PLAN FRAGMENT 4
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 6
    HASH_PARTITIONED: a2.id + 1

  1:SCAN HDFS
     table=functional.testtbl #partitions=0 size=0B
     predicates: a2.id = 15
     tuple ids: 2

PLAN FRAGMENT 5
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 5
    HASH_PARTITIONED: a1.id - 1

  0:SCAN HDFS
     table=functional.testtbl #partitions=0 size=0B
     predicates: a1.zip = 94611
     tuple ids: 0
---- SCANRANGELOCATIONS
NODE 0:
NODE 1:
NODE 3:
====
# right outer join requires the join op to be partitioned, otherwise non-matches cause
# duplicates
select a.tinyint_col, b.id
from functional.alltypesagg a
right outer join functional.alltypestiny b on (a.tinyint_col = b.id)
where a.tinyint_col is null
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  2:HASH JOIN
  |  join op: RIGHT OUTER JOIN
  |  hash predicates:
  |    a.tinyint_col = b.id
  |  other predicates: a.tinyint_col IS NULL
  |  tuple ids: 0N 1
  |
  |----1:SCAN HDFS
  |       table=functional.alltypestiny #partitions=4 size=460B compact
  |       tuple ids: 1
  |
  0:SCAN HDFS
     table=functional.alltypesagg #partitions=10 size=743.67KB
     tuple ids: 0
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  5:EXCHANGE
     tuple ids: 0N 1

PLAN FRAGMENT 1
  PARTITION: HASH_PARTITIONED: a.tinyint_col

  STREAM DATA SINK
    EXCHANGE ID: 5
    UNPARTITIONED

  2:HASH JOIN
  |  join op: RIGHT OUTER JOIN (PARTITIONED)
  |  hash predicates:
  |    a.tinyint_col = b.id
  |  other predicates: a.tinyint_col IS NULL
  |  tuple ids: 0N 1
  |
  |----4:EXCHANGE
  |       tuple ids: 1
  |
  3:EXCHANGE
     tuple ids: 0

PLAN FRAGMENT 2
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 4
    HASH_PARTITIONED: b.id

  1:SCAN HDFS
     table=functional.alltypestiny #partitions=4 size=460B
     tuple ids: 1

PLAN FRAGMENT 3
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 3
    HASH_PARTITIONED: a.tinyint_col

  0:SCAN HDFS
     table=functional.alltypesagg #partitions=10 size=743.67KB
     tuple ids: 0
====
# same for full outer joins
select a.tinyint_col, b.id
from functional.alltypesagg a
full outer join functional.alltypestiny b on (a.tinyint_col = b.id)
where a.tinyint_col is null
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  2:HASH JOIN
  |  join op: FULL OUTER JOIN
  |  hash predicates:
  |    a.tinyint_col = b.id
  |  other predicates: a.tinyint_col IS NULL
  |  tuple ids: 0N 1N
  |
  |----1:SCAN HDFS
  |       table=functional.alltypestiny #partitions=4 size=460B compact
  |       tuple ids: 1
  |
  0:SCAN HDFS
     table=functional.alltypesagg #partitions=10 size=743.67KB
     tuple ids: 0
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  5:EXCHANGE
     tuple ids: 0N 1N

PLAN FRAGMENT 1
  PARTITION: HASH_PARTITIONED: a.tinyint_col

  STREAM DATA SINK
    EXCHANGE ID: 5
    UNPARTITIONED

  2:HASH JOIN
  |  join op: FULL OUTER JOIN (PARTITIONED)
  |  hash predicates:
  |    a.tinyint_col = b.id
  |  other predicates: a.tinyint_col IS NULL
  |  tuple ids: 0N 1N
  |
  |----4:EXCHANGE
  |       tuple ids: 1
  |
  3:EXCHANGE
     tuple ids: 0

PLAN FRAGMENT 2
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 4
    HASH_PARTITIONED: b.id

  1:SCAN HDFS
     table=functional.alltypestiny #partitions=4 size=460B
     tuple ids: 1

PLAN FRAGMENT 3
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 3
    HASH_PARTITIONED: a.tinyint_col

  0:SCAN HDFS
     table=functional.alltypesagg #partitions=10 size=743.67KB
     tuple ids: 0
====
