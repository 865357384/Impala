# predicate pushdown
select * from (select * from functional.alltypessmall) a where id < 5
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  0:SCAN HDFS
     table=functional.alltypessmall #partitions=4 size=6.32KB
     predicates: functional.alltypessmall.id < 5
     tuple ids: 0 
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  1:EXCHANGE
     tuple ids: 0 

PLAN FRAGMENT 1
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 1
    UNPARTITIONED

  0:SCAN HDFS
     table=functional.alltypessmall #partitions=4 size=6.32KB
     predicates: functional.alltypessmall.id < 5
     tuple ids: 0 
====
# predicate pushdown is prevented in presence of limit clause
select * from (select * from functional.alltypessmall limit 10) a where id < 5 limit 5
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  1:SELECT
  |  predicates: functional.alltypessmall.id < 5
  |  limit: 5
  |  tuple ids: 0 
  |  
  0:SCAN HDFS
     table=functional.alltypessmall #partitions=4 size=6.32KB
     limit: 10
     tuple ids: 0 
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  1:SELECT
  |  predicates: functional.alltypessmall.id < 5
  |  limit: 5
  |  tuple ids: 0 
  |  
  2:EXCHANGE
     limit: 10
     tuple ids: 0 

PLAN FRAGMENT 1
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 2
    UNPARTITIONED

  0:SCAN HDFS
     table=functional.alltypessmall #partitions=4 size=6.32KB
     limit: 10
     tuple ids: 0 
====
# predicate pushdown is prevented in presence of order by/limit clause;
# top-n is distributed
select *
from (select * from functional.alltypessmall order by id limit 10) a
where id < 5 limit 5
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  2:SELECT
  |  predicates: functional.alltypessmall.id < 5
  |  limit: 5
  |  tuple ids: 0 
  |  
  1:TOP-N
  |  order by: id ASC
  |  limit: 10
  |  tuple ids: 0 
  |  
  0:SCAN HDFS
     table=functional.alltypessmall #partitions=4 size=6.32KB
     tuple ids: 0 
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  2:SELECT
  |  predicates: functional.alltypessmall.id < 5
  |  limit: 5
  |  tuple ids: 0 
  |  
  4:TOP-N
  |  order by: id ASC
  |  limit: 10
  |  tuple ids: 0 
  |  
  3:EXCHANGE
     tuple ids: 0 

PLAN FRAGMENT 1
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 3
    UNPARTITIONED

  1:TOP-N
  |  order by: id ASC
  |  limit: 10
  |  tuple ids: 0 
  |  
  0:SCAN HDFS
     table=functional.alltypessmall #partitions=4 size=6.32KB
     tuple ids: 0 
====
# top-n is not distributed because it depends on the output of the aggregation
select *
from functional.alltypes
  join (
    select id, count(*)
    from functional.alltypes
    group by 1 order by 2 limit 5) a using (id)
where a.id < 5 limit 5
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  4:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    functional.alltypes.id = id
  |  other predicates: id < 5
  |  limit: 5
  |  tuple ids: 0 2 
  |  
  |----3:TOP-N
  |    |  order by: COUNT(*) ASC
  |    |  limit: 5
  |    |  tuple ids: 2 
  |    |  
  |    2:AGGREGATE
  |    |  output: COUNT(*)
  |    |  group by: id
  |    |  tuple ids: 2 
  |    |  
  |    1:SCAN HDFS
  |       table=functional.alltypes #partitions=24 size=478.45KB
  |       tuple ids: 1 
  |    
  0:SCAN HDFS
     table=functional.alltypes #partitions=24 size=478.45KB
     tuple ids: 0 
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  10:EXCHANGE
     limit: 5
     tuple ids: 0 2 

PLAN FRAGMENT 1
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 10
    UNPARTITIONED

  4:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    functional.alltypes.id = id
  |  other predicates: id < 5
  |  limit: 5
  |  tuple ids: 0 2 
  |  
  |----9:EXCHANGE
  |       limit: 5
  |       tuple ids: 2 
  |    
  0:SCAN HDFS
     table=functional.alltypes #partitions=24 size=478.45KB
     tuple ids: 0 

PLAN FRAGMENT 2
  PARTITION: UNPARTITIONED

  STREAM DATA SINK
    EXCHANGE ID: 9
    UNPARTITIONED

  8:TOP-N
  |  order by: COUNT(*) ASC
  |  limit: 5
  |  tuple ids: 2 
  |  
  7:EXCHANGE
     tuple ids: 2 

PLAN FRAGMENT 3
  PARTITION: HASH_PARTITIONED: id

  STREAM DATA SINK
    EXCHANGE ID: 7
    UNPARTITIONED

  3:TOP-N
  |  order by: COUNT(*) ASC
  |  limit: 5
  |  tuple ids: 2 
  |  
  6:AGGREGATE
  |  output: SUM(COUNT(*))
  |  group by: id
  |  tuple ids: 2 
  |  
  5:EXCHANGE
     tuple ids: 2 

PLAN FRAGMENT 4
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 5
    HASH_PARTITIONED: id

  2:AGGREGATE
  |  output: COUNT(*)
  |  group by: id
  |  tuple ids: 2 
  |  
  1:SCAN HDFS
     table=functional.alltypes #partitions=24 size=478.45KB
     tuple ids: 1 
====
# predicate pushdown is prevented in presence of limit clause; variant w/ join
select *
from (
  select a.*
  from functional.alltypessmall a join functional.alltypessmall using (id)
  limit 10) a
where id < 5 limit 5
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  3:SELECT
  |  predicates: a.id < 5
  |  limit: 5
  |  tuple ids: 0 1 
  |  
  2:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    a.id = functional.alltypessmall.id
  |  limit: 10
  |  tuple ids: 0 1 
  |  
  |----1:SCAN HDFS
  |       table=functional.alltypessmall #partitions=4 size=6.32KB compact
  |       tuple ids: 1 
  |    
  0:SCAN HDFS
     table=functional.alltypessmall #partitions=4 size=6.32KB
     tuple ids: 0 
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  3:SELECT
  |  predicates: a.id < 5
  |  limit: 5
  |  tuple ids: 0 1 
  |  
  5:EXCHANGE
     limit: 10
     tuple ids: 0 1 

PLAN FRAGMENT 1
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 5
    UNPARTITIONED

  2:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    a.id = functional.alltypessmall.id
  |  limit: 10
  |  tuple ids: 0 1 
  |  
  |----4:EXCHANGE
  |       tuple ids: 1 
  |    
  0:SCAN HDFS
     table=functional.alltypessmall #partitions=4 size=6.32KB
     tuple ids: 0 

PLAN FRAGMENT 2
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 4
    UNPARTITIONED

  1:SCAN HDFS
     table=functional.alltypessmall #partitions=4 size=6.32KB compact
     tuple ids: 1 
====
# predicate pushdown is prevented in presence of order by/limit clause
select *
from (select * from functional.alltypessmall limit 10) a
where id < 5
order by id
limit 5
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  2:TOP-N
  |  order by: functional.alltypessmall.id ASC
  |  limit: 5
  |  tuple ids: 0 
  |  
  1:SELECT
  |  predicates: functional.alltypessmall.id < 5
  |  tuple ids: 0 
  |  
  0:SCAN HDFS
     table=functional.alltypessmall #partitions=4 size=6.32KB
     limit: 10
     tuple ids: 0 
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  2:TOP-N
  |  order by: functional.alltypessmall.id ASC
  |  limit: 5
  |  tuple ids: 0 
  |  
  1:SELECT
  |  predicates: functional.alltypessmall.id < 5
  |  tuple ids: 0 
  |  
  3:EXCHANGE
     limit: 10
     tuple ids: 0 

PLAN FRAGMENT 1
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 3
    UNPARTITIONED

  0:SCAN HDFS
     table=functional.alltypessmall #partitions=4 size=6.32KB
     limit: 10
     tuple ids: 0 
====
# predicate pushdown is prevented in presence of order by/limit clause; variant w/ join
select *
from (
  select a.*
  from functional.alltypessmall a
    join functional.alltypessmall using (id)
  limit 10) a
where id < 5
order by id
limit 5
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  4:TOP-N
  |  order by: a.id ASC
  |  limit: 5
  |  tuple ids: 0 1 
  |  
  3:SELECT
  |  predicates: a.id < 5
  |  tuple ids: 0 1 
  |  
  2:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    a.id = functional.alltypessmall.id
  |  limit: 10
  |  tuple ids: 0 1 
  |  
  |----1:SCAN HDFS
  |       table=functional.alltypessmall #partitions=4 size=6.32KB compact
  |       tuple ids: 1 
  |    
  0:SCAN HDFS
     table=functional.alltypessmall #partitions=4 size=6.32KB
     tuple ids: 0 
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  4:TOP-N
  |  order by: a.id ASC
  |  limit: 5
  |  tuple ids: 0 1 
  |  
  3:SELECT
  |  predicates: a.id < 5
  |  tuple ids: 0 1 
  |  
  6:EXCHANGE
     limit: 10
     tuple ids: 0 1 

PLAN FRAGMENT 1
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 6
    UNPARTITIONED

  2:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    a.id = functional.alltypessmall.id
  |  limit: 10
  |  tuple ids: 0 1 
  |  
  |----5:EXCHANGE
  |       tuple ids: 1 
  |    
  0:SCAN HDFS
     table=functional.alltypessmall #partitions=4 size=6.32KB
     tuple ids: 0 

PLAN FRAGMENT 2
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 5
    UNPARTITIONED

  1:SCAN HDFS
     table=functional.alltypessmall #partitions=4 size=6.32KB compact
     tuple ids: 1 
====
# join against subquery with limit creates a merge fragment that applies the limit
select *
from functional.alltypes
  join (select id from functional.alltypessmall limit 10) a using (id)
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  2:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    functional.alltypes.id = id
  |  tuple ids: 0 1 
  |  
  |----1:SCAN HDFS
  |       table=functional.alltypessmall #partitions=4 size=6.32KB compact
  |       limit: 10
  |       tuple ids: 1 
  |    
  0:SCAN HDFS
     table=functional.alltypes #partitions=24 size=478.45KB
     tuple ids: 0 
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  5:EXCHANGE
     tuple ids: 0 1 

PLAN FRAGMENT 1
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 5
    UNPARTITIONED

  2:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    functional.alltypes.id = id
  |  tuple ids: 0 1 
  |  
  |----4:EXCHANGE
  |       limit: 10
  |       tuple ids: 1 
  |    
  0:SCAN HDFS
     table=functional.alltypes #partitions=24 size=478.45KB
     tuple ids: 0 

PLAN FRAGMENT 2
  PARTITION: UNPARTITIONED

  STREAM DATA SINK
    EXCHANGE ID: 4
    UNPARTITIONED

  3:EXCHANGE
     limit: 10
     tuple ids: 1 

PLAN FRAGMENT 3
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 3
    UNPARTITIONED

  1:SCAN HDFS
     table=functional.alltypessmall #partitions=4 size=6.32KB compact
     limit: 10
     tuple ids: 1 
====
# join against subquery with limit creates a merge fragment that applies the limit;
# topn is distributed
select *
from functional.alltypes
  join (select id from functional.alltypessmall order by id limit 10) a using (id)
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  3:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    functional.alltypes.id = id
  |  tuple ids: 0 1 
  |  
  |----2:TOP-N
  |    |  order by: id ASC
  |    |  limit: 10
  |    |  tuple ids: 1 
  |    |  
  |    1:SCAN HDFS
  |       table=functional.alltypessmall #partitions=4 size=6.32KB
  |       tuple ids: 1 
  |    
  0:SCAN HDFS
     table=functional.alltypes #partitions=24 size=478.45KB
     tuple ids: 0 
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  7:EXCHANGE
     tuple ids: 0 1 

PLAN FRAGMENT 1
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 7
    UNPARTITIONED

  3:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    functional.alltypes.id = id
  |  tuple ids: 0 1 
  |  
  |----6:EXCHANGE
  |       limit: 10
  |       tuple ids: 1 
  |    
  0:SCAN HDFS
     table=functional.alltypes #partitions=24 size=478.45KB
     tuple ids: 0 

PLAN FRAGMENT 2
  PARTITION: UNPARTITIONED

  STREAM DATA SINK
    EXCHANGE ID: 6
    UNPARTITIONED

  5:TOP-N
  |  order by: id ASC
  |  limit: 10
  |  tuple ids: 1 
  |  
  4:EXCHANGE
     tuple ids: 1 

PLAN FRAGMENT 3
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 4
    UNPARTITIONED

  2:TOP-N
  |  order by: id ASC
  |  limit: 10
  |  tuple ids: 1 
  |  
  1:SCAN HDFS
     table=functional.alltypessmall #partitions=4 size=6.32KB
     tuple ids: 1 
====
# join against subquery with limit;
# predicate pushdown is prevented in presence of order by/limit clause; variant w/ join
select *
from functional.alltypes
  join (
    select a.id
    from functional.alltypessmall a join functional.alltypestiny using (id)
    limit 10) a using (id)
where a.id < 5
order by a.id
limit 5
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  5:TOP-N
  |  order by: a.id ASC
  |  limit: 5
  |  tuple ids: 0 1 2 
  |  
  4:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    functional.alltypes.id = a.id
  |  other predicates: a.id < 5
  |  tuple ids: 0 1 2 
  |  
  |----3:HASH JOIN
  |    |  join op: INNER JOIN
  |    |  hash predicates:
  |    |    a.id = functional.alltypestiny.id
  |    |  limit: 10
  |    |  tuple ids: 1 2 
  |    |  
  |    |----2:SCAN HDFS
  |    |       table=functional.alltypestiny #partitions=4 size=460B compact
  |    |       tuple ids: 2 
  |    |    
  |    1:SCAN HDFS
  |       table=functional.alltypessmall #partitions=4 size=6.32KB compact
  |       tuple ids: 1 
  |    
  0:SCAN HDFS
     table=functional.alltypes #partitions=24 size=478.45KB
     tuple ids: 0 
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  10:TOP-N
  |  order by: a.id ASC
  |  limit: 5
  |  tuple ids: 0 1 2 
  |  
  9:EXCHANGE
     tuple ids: 0 1 2 

PLAN FRAGMENT 1
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 9
    UNPARTITIONED

  5:TOP-N
  |  order by: a.id ASC
  |  limit: 5
  |  tuple ids: 0 1 2 
  |  
  4:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    functional.alltypes.id = a.id
  |  other predicates: a.id < 5
  |  tuple ids: 0 1 2 
  |  
  |----8:EXCHANGE
  |       limit: 10
  |       tuple ids: 1 2 
  |    
  0:SCAN HDFS
     table=functional.alltypes #partitions=24 size=478.45KB
     tuple ids: 0 

PLAN FRAGMENT 2
  PARTITION: UNPARTITIONED

  STREAM DATA SINK
    EXCHANGE ID: 8
    UNPARTITIONED

  7:EXCHANGE
     limit: 10
     tuple ids: 1 2 

PLAN FRAGMENT 3
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 7
    UNPARTITIONED

  3:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    a.id = functional.alltypestiny.id
  |  limit: 10
  |  tuple ids: 1 2 
  |  
  |----6:EXCHANGE
  |       tuple ids: 2 
  |    
  1:SCAN HDFS
     table=functional.alltypessmall #partitions=4 size=6.32KB compact
     tuple ids: 1 

PLAN FRAGMENT 4
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 6
    UNPARTITIONED

  2:SCAN HDFS
     table=functional.alltypestiny #partitions=4 size=460B compact
     tuple ids: 2 
====
# join against subquery with order by/limit;
# predicate pushdown is prevented in presence of order by/limit clause; variant w/ join
select *
from functional.alltypes
  join (
    select a.id
    from functional.alltypessmall a join functional.alltypestiny using (id)
    order by a.int_col
    limit 10) a using (id)
where a.id < 5
order by a.id
limit 5
---- PLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  6:TOP-N
  |  order by: a.id ASC
  |  limit: 5
  |  tuple ids: 0 1 2 
  |  
  5:HASH JOIN
  |  join op: INNER JOIN
  |  hash predicates:
  |    functional.alltypes.id = a.id
  |  other predicates: a.id < 5
  |  tuple ids: 0 1 2 
  |  
  |----4:TOP-N
  |    |  order by: a.int_col ASC
  |    |  limit: 10
  |    |  tuple ids: 1 2 
  |    |  
  |    3:HASH JOIN
  |    |  join op: INNER JOIN
  |    |  hash predicates:
  |    |    a.id = functional.alltypestiny.id
  |    |  tuple ids: 1 2 
  |    |  
  |    |----2:SCAN HDFS
  |    |       table=functional.alltypestiny #partitions=4 size=460B compact
  |    |       tuple ids: 2 
  |    |    
  |    1:SCAN HDFS
  |       table=functional.alltypessmall #partitions=4 size=6.32KB
  |       tuple ids: 1 
  |    
  0:SCAN HDFS
     table=functional.alltypes #partitions=24 size=478.45KB
     tuple ids: 0 
---- DISTRIBUTEDPLAN
PLAN FRAGMENT 0
  PARTITION: UNPARTITIONED

  12:TOP-N
  |  order by: a.id ASC
  |  limit: 5
  |  tuple ids: 0 1 2 
  |  
  11:EXCHANGE
     tuple ids: 0 1 2 

PLAN FRAGMENT 1
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 11
    UNPARTITIONED

  6:TOP-N
  |  order by: a.id ASC
  |  limit: 5
  |  tuple ids: 0 1 2 
  |  
  5:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    functional.alltypes.id = a.id
  |  other predicates: a.id < 5
  |  tuple ids: 0 1 2 
  |  
  |----10:EXCHANGE
  |       limit: 10
  |       tuple ids: 1 2 
  |    
  0:SCAN HDFS
     table=functional.alltypes #partitions=24 size=478.45KB
     tuple ids: 0 

PLAN FRAGMENT 2
  PARTITION: UNPARTITIONED

  STREAM DATA SINK
    EXCHANGE ID: 10
    UNPARTITIONED

  9:TOP-N
  |  order by: a.int_col ASC
  |  limit: 10
  |  tuple ids: 1 2 
  |  
  8:EXCHANGE
     tuple ids: 1 2 

PLAN FRAGMENT 3
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 8
    UNPARTITIONED

  4:TOP-N
  |  order by: a.int_col ASC
  |  limit: 10
  |  tuple ids: 1 2 
  |  
  3:HASH JOIN
  |  join op: INNER JOIN (BROADCAST)
  |  hash predicates:
  |    a.id = functional.alltypestiny.id
  |  tuple ids: 1 2 
  |  
  |----7:EXCHANGE
  |       tuple ids: 2 
  |    
  1:SCAN HDFS
     table=functional.alltypessmall #partitions=4 size=6.32KB
     tuple ids: 1 

PLAN FRAGMENT 4
  PARTITION: RANDOM

  STREAM DATA SINK
    EXCHANGE ID: 7
    UNPARTITIONED

  2:SCAN HDFS
     table=functional.alltypestiny #partitions=4 size=460B compact
     tuple ids: 2 
====
