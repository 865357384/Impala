// Copyright (c) 2011 Cloudera, Inc. All rights reserved.

package com.cloudera.impala.jdbc;

import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.LinkedBlockingQueue;

import com.cloudera.impala.catalog.PrimitiveType;
import com.cloudera.impala.common.ImpalaException;
import com.cloudera.impala.service.Executor;
import com.cloudera.impala.service.InsertResult;
import com.cloudera.impala.thrift.TQueryRequest;
import com.cloudera.impala.thrift.TResultRow;

/**
 * Minimal implementation required to run select queries with sqlline.
 * The implemented methods must return non-null values.
 * Most methods are not implemented because they are not required to make sqlline work.
 * Unimplemented methods throw an UnsupportedOperationException that includes the method name of the
 * called method for easier debugging.
 *
 * This class represents a query statement. It executes queries and provides their ResultSet.
 */
public class ImpalaStatement implements Statement {

  // ResultSet of queries, run via the implemented execute*() calls.
  private ResultSet resultSet;
  // Database connection to run queries on.
  private final Connection connection;
  // For executing queries.
  private final Executor executor;
  // Thrift query request passed to coordinator.
  private final TQueryRequest request = new TQueryRequest();
  // Output column types
  private final List<PrimitiveType> colTypes = new ArrayList<PrimitiveType>();
  // Output column labels
  private final List<String> colLabels = new ArrayList<String>();
  // List of error strings received from query execution.
  private final List<String> errorLog = new ArrayList<String>();
  // Maps from file name to number of errors encountered in that file.
  private final Map<String, Integer> fileErrors = new HashMap<String, Integer>();
  // Queue where results are placed in.
  private final BlockingQueue<TResultRow> resultQueue = new LinkedBlockingQueue<TResultRow>();
  // Object holding insert result.
  private final InsertResult insertResult = new InsertResult();

  public ImpalaStatement(Executor executor, Connection connection) {
    this.executor = executor;
    this.connection = connection;
  }

  @Override
  public Connection getConnection() throws SQLException {
    return connection;
  }

  @Override
  public boolean execute(String sql) throws SQLException {
    resultSet = executeQuery(sql);
    if (resultSet != null) {
      return true;
    }
    return true;
  }

  @Override
  public ResultSet executeQuery(String sql) throws SQLException {
    errorLog.clear();
    fileErrors.clear();
    resultQueue.clear();
    insertResult.clear();
    colTypes.clear();
    colLabels.clear();
    request.stmt = sql;
    request.returnAsAscii = true;
    try {
      executor.runQuery(
          request, colTypes, colLabels, null, Executor.DEFAULT_BATCH_SIZE,
          Executor.DEFAULT_ABORT_ON_ERROR, Executor.DEFAULT_MAX_ERRORS,
          Executor.DEFAULT_DISABLE_CODEGEN, errorLog, fileErrors, resultQueue,
          insertResult);
    } catch (ImpalaException e) {
      throw new SQLException(e);
    }
    return new ImpalaResultSet(resultQueue, colTypes, colLabels);
  }

  @Override
  public ResultSet getResultSet() throws SQLException {
    return resultSet;
  }

  @Override
  public boolean getMoreResults() throws SQLException {
    // sqlline uses this call, but I am not absolutely sure how.
    // if we return true then queries run forever.
    // if we return resultSet.next() then queries run forever.
    // if we set this to false then it works fine.
    return false;
  }

  @Override
  public void close() throws SQLException {
    colTypes.clear();
    colLabels.clear();
    resultQueue.clear();
  }

  // Non-essential and unimplemented methods start here.

  @Override
  public int executeUpdate(String sql, int autoGeneratedKeys) throws SQLException {
    throw UnsupportedOpHelper.newUnimplementedMethodException();
  }

  @Override
  public int executeUpdate(String sql, int[] columnIndexes) throws SQLException {
    throw UnsupportedOpHelper.newUnimplementedMethodException();
  }

  @Override
  public int executeUpdate(String sql, String[] columnNames) throws SQLException {
    throw UnsupportedOpHelper.newUnimplementedMethodException();
  }

  @Override
  public boolean execute(String sql, int autoGeneratedKeys) throws SQLException {
    throw UnsupportedOpHelper.newUnimplementedMethodException();
  }

  @Override
  public boolean execute(String sql, int[] columnIndexes) throws SQLException {
    throw UnsupportedOpHelper.newUnimplementedMethodException();
  }

  @Override
  public boolean execute(String sql, String[] columnNames) throws SQLException {
    throw UnsupportedOpHelper.newUnimplementedMethodException();
  }

  @Override
  public <T> T unwrap(Class<T> iface) throws SQLException {
    throw UnsupportedOpHelper.newUnimplementedMethodException();
  }

  @Override
  public boolean isWrapperFor(Class<?> iface) throws SQLException {
    throw UnsupportedOpHelper.newUnimplementedMethodException();
  }

  @Override
  public int executeUpdate(String sql) throws SQLException {
    throw UnsupportedOpHelper.newUnimplementedMethodException();
  }

  @Override
  public int getMaxFieldSize() throws SQLException {
    throw UnsupportedOpHelper.newUnimplementedMethodException();
  }

  @Override
  public void setMaxFieldSize(int max) throws SQLException {
    throw UnsupportedOpHelper.newUnimplementedMethodException();
  }

  @Override
  public int getMaxRows() throws SQLException {
    throw UnsupportedOpHelper.newUnimplementedMethodException();
  }

  @Override
  public void setMaxRows(int max) throws SQLException {
    throw UnsupportedOpHelper.newUnimplementedMethodException();
  }

  @Override
  public void setEscapeProcessing(boolean enable) throws SQLException {
    throw UnsupportedOpHelper.newUnimplementedMethodException();
  }

  @Override
  public int getQueryTimeout() throws SQLException {
    throw UnsupportedOpHelper.newUnimplementedMethodException();
  }

  @Override
  public void setQueryTimeout(int seconds) throws SQLException {
    throw UnsupportedOpHelper.newUnimplementedMethodException();
  }

  @Override
  public void cancel() throws SQLException {
    throw UnsupportedOpHelper.newUnimplementedMethodException();
  }

  @Override
  public SQLWarning getWarnings() throws SQLException {
    throw UnsupportedOpHelper.newUnimplementedMethodException();
  }

  @Override
  public void clearWarnings() throws SQLException {
    throw UnsupportedOpHelper.newUnimplementedMethodException();
  }

  @Override
  public void setCursorName(String name) throws SQLException {
    throw UnsupportedOpHelper.newUnimplementedMethodException();
  }

  @Override
  public int getUpdateCount() throws SQLException {
    throw UnsupportedOpHelper.newUnimplementedMethodException();
  }

  @Override
  public void setFetchDirection(int direction) throws SQLException {
    throw UnsupportedOpHelper.newUnimplementedMethodException();
  }

  @Override
  public int getFetchDirection() throws SQLException {
    throw UnsupportedOpHelper.newUnimplementedMethodException();
  }

  @Override
  public void setFetchSize(int rows) throws SQLException {
    throw UnsupportedOpHelper.newUnimplementedMethodException();
  }

  @Override
  public int getFetchSize() throws SQLException {
    throw UnsupportedOpHelper.newUnimplementedMethodException();
  }

  @Override
  public int getResultSetConcurrency() throws SQLException {
    throw UnsupportedOpHelper.newUnimplementedMethodException();
  }

  @Override
  public int getResultSetType() throws SQLException {
    throw UnsupportedOpHelper.newUnimplementedMethodException();
  }

  @Override
  public void addBatch(String sql) throws SQLException {
    throw UnsupportedOpHelper.newUnimplementedMethodException();
  }

  @Override
  public void clearBatch() throws SQLException {
    throw UnsupportedOpHelper.newUnimplementedMethodException();
  }

  @Override
  public int[] executeBatch() throws SQLException {
    throw UnsupportedOpHelper.newUnimplementedMethodException();
  }

  @Override
  public boolean getMoreResults(int current) throws SQLException {
    throw UnsupportedOpHelper.newUnimplementedMethodException();
  }

  @Override
  public ResultSet getGeneratedKeys() throws SQLException {
    throw UnsupportedOpHelper.newUnimplementedMethodException();
  }

  @Override
  public int getResultSetHoldability() throws SQLException {
    throw UnsupportedOpHelper.newUnimplementedMethodException();
  }

  @Override
  public boolean isClosed() throws SQLException {
    throw UnsupportedOpHelper.newUnimplementedMethodException();
  }

  @Override
  public void setPoolable(boolean poolable) throws SQLException {
    throw UnsupportedOpHelper.newUnimplementedMethodException();
  }

  @Override
  public boolean isPoolable() throws SQLException {
    throw UnsupportedOpHelper.newUnimplementedMethodException();
  }

}
