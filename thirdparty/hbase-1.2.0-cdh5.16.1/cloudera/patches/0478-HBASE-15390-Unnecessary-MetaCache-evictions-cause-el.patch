From c8499a2f1bde6a721a473b9f56d72521c15943a8 Mon Sep 17 00:00:00 2001
From: Huaxiang Sun <hsun@cloudera.com>
Date: Mon, 17 Sep 2018 14:01:25 -0700
Subject: [PATCH 478/482] HBASE-15390 Unnecessary MetaCache evictions cause
 elevated number of requests to meta HBASE-15390
 Unnecessary MetaCache evictions cause elevated
 number of requests to meta (ADDENDUM)

Reason: Improvement
Author: Mikhail Antonov
Ref: CDH-72043
==C5_APPROVED_BUGFIX==

Change-Id: Ibcd71a3fa36812150f8fa06c85970457a298574e
---
 .../hadoop/hbase/CallQueueTooBigException.java     |    4 +
 .../apache/hadoop/hbase/client/AsyncProcess.java   |    2 +-
 .../hadoop/hbase/client/ConnectionManager.java     |    7 ++
 .../org/apache/hadoop/hbase/client/MetaCache.java  |   82 +++++++++-----------
 .../hadoop/hbase/client/MetricsConnection.java     |   33 +++++++-
 .../hbase/exceptions/ClientExceptionsUtil.java     |   19 +++--
 6 files changed, 93 insertions(+), 54 deletions(-)

diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/CallQueueTooBigException.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/CallQueueTooBigException.java
index d07c657..95ca988 100644
--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/CallQueueTooBigException.java
+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/CallQueueTooBigException.java
@@ -30,4 +30,8 @@ public class CallQueueTooBigException extends IOException {
   public CallQueueTooBigException() {
     super();
   }
+
+  public CallQueueTooBigException(String message) {
+    super(message);
+  }
 }
\ No newline at end of file
diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/AsyncProcess.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/AsyncProcess.java
index 28d62e2..7dd4ba7 100644
--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/AsyncProcess.java
+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/AsyncProcess.java
@@ -1179,7 +1179,7 @@ class AsyncProcess {
       Retry canRetry = errorsByServer.canRetryMore(numAttempt)
           ? Retry.YES : Retry.NO_RETRIES_EXHAUSTED;
 
-      if (tableName == null) {
+      if (tableName == null && ClientExceptionsUtil.isMetaClearingException(t)) {
         // tableName is null when we made a cross-table RPC call.
         connection.clearCaches(server);
       }
diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ConnectionManager.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ConnectionManager.java
index 93216d0..ae72ee1 100644
--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ConnectionManager.java
+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/ConnectionManager.java
@@ -2356,6 +2356,9 @@ class ConnectionManager {
 
       if (regionName == null) {
         // we do not know which region, so just remove the cache entry for the row and server
+        if (metrics != null) {
+          metrics.incrCacheDroppingExceptions(exception);
+        }
         metaCache.clearCache(tableName, rowkey, source);
         return;
       }
@@ -2395,6 +2398,10 @@ class ConnectionManager {
         }
       }
 
+      if (metrics != null) {
+        metrics.incrCacheDroppingExceptions(exception);
+      }
+
       // If we're here, it means that can cannot be sure about the location, so we remove it from
       // the cache. Do not send the source because source can be a new server in the same host:port
       metaCache.clearCache(regionInfo);
diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/MetaCache.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/MetaCache.java
index fcfde88..44b33d7 100644
--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/MetaCache.java
+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/MetaCache.java
@@ -90,8 +90,7 @@ public class MetaCache {
     // checking is actually the last region in the table.
     byte[] endKey = possibleRegion.getRegionLocation().getRegionInfo().getEndKey();
     if (Bytes.equals(endKey, HConstants.EMPTY_END_ROW) ||
-        getRowComparator(tableName).compareRows(
-            endKey, 0, endKey.length, row, 0, row.length) > 0) {
+        getRowComparator(tableName).compareRows(endKey, 0, endKey.length, row, 0, row.length) > 0) {
       if (metrics != null) metrics.incrMetaCacheHit();
       return possibleRegion;
     }
@@ -129,7 +128,7 @@ public class MetaCache {
 
     // If the server in cache sends us a redirect, assume it's always valid.
     HRegionLocation oldLocation = oldLocations.getRegionLocation(
-      location.getRegionInfo().getReplicaId());
+        location.getRegionInfo().getReplicaId());
     boolean force = oldLocation != null && oldLocation.getServerName() != null
         && oldLocation.getServerName().equals(source);
 
@@ -275,8 +274,13 @@ public class MetaCache {
       }
       this.cachedServers.remove(serverName);
     }
-    if (deletedSomething && LOG.isTraceEnabled()) {
-      LOG.trace("Removed all cached region locations that map to " + serverName);
+    if (deletedSomething) {
+      if (metrics != null) {
+        metrics.incrMetaCacheNumClearServer();
+      }
+      if (LOG.isTraceEnabled()) {
+        LOG.trace("Removed all cached region locations that map to " + serverName);
+      }
     }
   }
 
@@ -303,38 +307,13 @@ public class MetaCache {
     if (regionLocations != null) {
       byte[] startKey = regionLocations.getRegionLocation().getRegionInfo().getStartKey();
       boolean removed = tableLocations.remove(startKey, regionLocations);
-      if (removed && LOG.isTraceEnabled()) {
-        LOG.trace("Removed " + regionLocations + " from cache");
-      }
-    }
-  }
-
-  /**
-   * Delete a cached location with specific replicaId.
-   * @param tableName tableName
-   * @param row row key
-   * @param replicaId region replica id
-   */
-  public void clearCache(final TableName tableName, final byte [] row, int replicaId) {
-    ConcurrentMap<byte[], RegionLocations> tableLocations = getTableLocations(tableName);
-
-    RegionLocations regionLocations = getCachedLocation(tableName, row);
-    if (regionLocations != null) {
-      HRegionLocation toBeRemoved = regionLocations.getRegionLocation(replicaId);
-      if (toBeRemoved != null) {
-        RegionLocations updatedLocations = regionLocations.remove(replicaId);
-        byte[] startKey = regionLocations.getRegionLocation().getRegionInfo().getStartKey();
-        boolean removed;
-        if (updatedLocations.isEmpty()) {
-          removed = tableLocations.remove(startKey, regionLocations);
-        } else {
-          removed = tableLocations.replace(startKey, regionLocations, updatedLocations);
+      if (removed) {
+        if (metrics != null) {
+          metrics.incrMetaCacheNumClearRegion();
         }
 
-        if (removed) {
-          if (LOG.isTraceEnabled()) {
-            LOG.trace("Removed " + toBeRemoved + " from cache");
-          }
+        if (LOG.isTraceEnabled()) {
+          LOG.trace("Removed " + regionLocations + " from cache");
         }
       }
     }
@@ -357,9 +336,14 @@ public class MetaCache {
         } else {
           removed = tableLocations.replace(startKey, regionLocations, updatedLocations);
         }
-        if (removed && LOG.isTraceEnabled()) {
-          LOG.trace("Removed locations of table: " + tableName + " ,row: " + Bytes.toString(row)
-            + " mapping to server: " + serverName + " from cache");
+        if (removed) {
+          if (metrics != null) {
+            metrics.incrMetaCacheNumClearRegion();
+          }
+          if (LOG.isTraceEnabled()) {
+            LOG.trace("Removed locations of table: " + tableName + " ,row: " + Bytes.toString(row)
+              + " mapping to server: " + serverName + " from cache");
+          }
         }
       }
     }
@@ -376,15 +360,20 @@ public class MetaCache {
       HRegionLocation oldLocation = regionLocations.getRegionLocation(hri.getReplicaId());
       if (oldLocation == null) return;
       RegionLocations updatedLocations = regionLocations.remove(oldLocation);
-      boolean removed = false;
+      boolean removed;
       if (updatedLocations != regionLocations) {
         if (updatedLocations.isEmpty()) {
           removed = tableLocations.remove(hri.getStartKey(), regionLocations);
         } else {
           removed = tableLocations.replace(hri.getStartKey(), regionLocations, updatedLocations);
         }
-        if (removed && LOG.isTraceEnabled()) {
-          LOG.trace("Removed " + oldLocation + " from cache");
+        if (removed) {
+          if (metrics != null) {
+            metrics.incrMetaCacheNumClearRegion();
+          }
+          if (LOG.isTraceEnabled()) {
+            LOG.trace("Removed " + oldLocation + " from cache");
+          }
         }
       }
     }
@@ -399,15 +388,20 @@ public class MetaCache {
     RegionLocations regionLocations = tableLocations.get(location.getRegionInfo().getStartKey());
     if (regionLocations != null) {
       RegionLocations updatedLocations = regionLocations.remove(location);
-      boolean removed = false;
+      boolean removed;
       if (updatedLocations != regionLocations) {
         if (updatedLocations.isEmpty()) {
           removed = tableLocations.remove(location.getRegionInfo().getStartKey(), regionLocations);
         } else {
           removed = tableLocations.replace(location.getRegionInfo().getStartKey(), regionLocations, updatedLocations);
         }
-        if (removed && LOG.isTraceEnabled()) {
-          LOG.trace("Removed " + location + " from cache");
+        if (removed) {
+          if (metrics != null) {
+            metrics.incrMetaCacheNumClearRegion();
+          }
+          if (LOG.isTraceEnabled()) {
+            LOG.trace("Removed " + location + " from cache");
+          }
         }
       }
     }
diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/MetricsConnection.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/MetricsConnection.java
index df279c6..b6efdb9 100644
--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/client/MetricsConnection.java
+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/client/MetricsConnection.java
@@ -60,6 +60,7 @@ public class MetricsConnection {
   private static final String RESP_BASE = "rpcCallResponseSizeBytes_";
   private static final String MEMLOAD_BASE = "memstoreLoad_";
   private static final String HEAP_BASE = "heapOccupancy_";
+  private static final String CACHE_BASE = "cacheDroppingExceptions_";
   private static final String CLIENT_SVC = ClientService.getDescriptor().getName();
 
   /** A container class for collecting details about the RPC call as it percolates. */
@@ -249,6 +250,12 @@ public class MetricsConnection {
     }
   };
 
+  private final NewMetric<Counter> counterFactory = new NewMetric<Counter>() {
+    @Override public Counter newMetric(Class<?> clazz, String name, String scope) {
+      return registry.newCounter(clazz, name, scope);
+    }
+  };
+
   // static metrics
 
   @VisibleForTesting protected final Counter metaCacheHits;
@@ -261,6 +268,8 @@ public class MetricsConnection {
   @VisibleForTesting protected final CallTracker putTracker;
   @VisibleForTesting protected final CallTracker multiTracker;
   @VisibleForTesting protected final RunnerStats runnerStats;
+  private final Counter metaCacheNumClearServer;
+  private final Counter metaCacheNumClearRegion;
 
   // dynamic metrics
 
@@ -272,6 +281,8 @@ public class MetricsConnection {
   @VisibleForTesting protected final ConcurrentMap<String, Histogram> rpcHistograms =
       new ConcurrentHashMap<>(CAPACITY * 2 /* tracking both request and response sizes */,
           LOAD_FACTOR, CONCURRENCY_LEVEL);
+  private final ConcurrentMap<String, Counter> cacheDroppingExceptions =
+    new ConcurrentHashMap<>(CAPACITY, LOAD_FACTOR, CONCURRENCY_LEVEL);
 
   public MetricsConnection(final ConnectionManager.HConnectionImplementation conn) {
     this.scope = conn.toString();
@@ -299,6 +310,10 @@ public class MetricsConnection {
         });
     this.metaCacheHits = registry.newCounter(this.getClass(), "metaCacheHits", scope);
     this.metaCacheMisses = registry.newCounter(this.getClass(), "metaCacheMisses", scope);
+    this.metaCacheNumClearServer = registry.newCounter(this.getClass(),
+      "metaCacheNumClearServer", scope);
+    this.metaCacheNumClearRegion = registry.newCounter(this.getClass(),
+      "metaCacheNumClearRegion", scope);
     this.getTracker = new CallTracker(this.registry, "Get", scope);
     this.scanTracker = new CallTracker(this.registry, "Scan", scope);
     this.appendTracker = new CallTracker(this.registry, "Mutate", "Append", scope);
@@ -333,6 +348,16 @@ public class MetricsConnection {
     metaCacheMisses.inc();
   }
 
+  /** Increment the number of meta cache drops requested for entire RegionServer. */
+  public void incrMetaCacheNumClearServer() {
+    metaCacheNumClearServer.inc();
+  }
+
+  /** Increment the number of meta cache drops requested for individual region. */
+  public void incrMetaCacheNumClearRegion() {
+    metaCacheNumClearRegion.inc();
+  }
+
   /** Increment the number of normal runner counts. */
   public void incrNormalRunners() {
     this.runnerStats.incrNormalRunners();
@@ -355,7 +380,8 @@ public class MetricsConnection {
     T t = map.get(key);
     if (t == null) {
       t = factory.newMetric(this.getClass(), key, scope);
-      map.putIfAbsent(key, t);
+      T tmp = map.putIfAbsent(key, t);
+      t = (tmp == null) ? t : tmp;
     }
     return t;
   }
@@ -427,4 +453,9 @@ public class MetricsConnection {
     // Fallback to dynamic registry lookup for DDL methods.
     updateRpcGeneric(method, stats);
   }
+
+  public void incrCacheDroppingExceptions(Object exception) {
+    getMetric(CACHE_BASE + exception.getClass().getSimpleName(),
+      cacheDroppingExceptions, counterFactory).inc();
+  }
 }
diff --git a/hbase-client/src/main/java/org/apache/hadoop/hbase/exceptions/ClientExceptionsUtil.java b/hbase-client/src/main/java/org/apache/hadoop/hbase/exceptions/ClientExceptionsUtil.java
index 2fca204..079e36b 100644
--- a/hbase-client/src/main/java/org/apache/hadoop/hbase/exceptions/ClientExceptionsUtil.java
+++ b/hbase-client/src/main/java/org/apache/hadoop/hbase/exceptions/ClientExceptionsUtil.java
@@ -21,11 +21,14 @@ package org.apache.hadoop.hbase.exceptions;
 
 import org.apache.hadoop.hbase.CallQueueTooBigException;
 import org.apache.hadoop.hbase.MultiActionResultTooLarge;
+import org.apache.hadoop.hbase.NotServingRegionException;
 import org.apache.hadoop.hbase.RegionTooBusyException;
 import org.apache.hadoop.hbase.RetryImmediatelyException;
 import org.apache.hadoop.hbase.classification.InterfaceAudience;
 import org.apache.hadoop.hbase.classification.InterfaceStability;
 import org.apache.hadoop.hbase.quotas.RpcThrottlingException;
+import org.apache.hadoop.hbase.ipc.CallTimeoutException;
+import org.apache.hadoop.hbase.ipc.FailedServerException;
 import org.apache.hadoop.hbase.quotas.ThrottlingException;
 import org.apache.hadoop.ipc.RemoteException;
 
@@ -49,7 +52,7 @@ public final class ClientExceptionsUtil {
         || cur instanceof RegionTooBusyException
         || cur instanceof ThrottlingException || cur instanceof RpcThrottlingException
         || cur instanceof MultiActionResultTooLarge || cur instanceof RetryImmediatelyException
-        || cur instanceof CallQueueTooBigException);
+        || cur instanceof CallQueueTooBigException || cur instanceof NotServingRegionException);
   }
 
 
@@ -73,19 +76,19 @@ public final class ClientExceptionsUtil {
       }
       if (cur instanceof RemoteException) {
         RemoteException re = (RemoteException) cur;
-        cur = re.unwrapRemoteException(
-            RegionOpeningException.class, RegionMovedException.class,
-            RegionTooBusyException.class);
-        if (cur == null) {
-          cur = re.unwrapRemoteException();
-        }
+        cur = re.unwrapRemoteException();
+
         // unwrapRemoteException can return the exception given as a parameter when it cannot
         //  unwrap it. In this case, there is no need to look further
         // noinspection ObjectEquality
         if (cur == re) {
           return cur;
         }
-      } else if (cur.getCause() != null) {
+
+        // When we receive RemoteException which wraps IOException which has a cause as
+        // RemoteException we can get into infinite loop here; so if the cause of the exception
+        // is RemoteException, we shouldn't look further.
+      } else if (cur.getCause() != null && !(cur.getCause() instanceof RemoteException)) {
         cur = cur.getCause();
       } else {
         return cur;
-- 
1.7.9.5

